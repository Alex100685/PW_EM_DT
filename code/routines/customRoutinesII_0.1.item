package routines;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class customRoutinesII {
	
	public final static short DATE_FORMAT_I = 1;
	public final static short DATE_FORMAT_II = 2;
	public final static short DATE_FORMAT_III = 3;
	public final static short DATE_FORMAT_IV = 4;
	
	private final static String DEFAULT_DATE = "00010101 00:00:01";
	
	private final static int[] PRIMES1 = {2,3,5,7,11,13,17,19,23,29};
	private static int[] PRIMES2 = null;
	
	static{
		PRIMES2 = new int[]{17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17};
		for(int i=0;i<20;i++){
			PRIMES2[i] *= (i+1);
		}
	}

	
    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static void helloExample(String message) {
        if (message == null || "".equalsIgnoreCase(message)) {
            message = "World"; //$NON-NLS-1$
        }
        System.out.println("Hello " + message + " !"); //$NON-NLS-1$ //$NON-NLS-2$
    }
    
    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Custom Routines
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static Float convertToFloat(String message) {
       if(message == null || "".equalsIgnoreCase(message)){
    	   return null;
       }else{
    	   return Float.parseFloat(message);
       }
    }
    
    /**
     * BigDecimalToString: converts a bigdecimal to string
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Custom Routines
     * 
     * {param} BigDecimal("number") input: The Big Decimal to be converted.
     * 
     * {example} BigDecimalToString("number") number.
     */
    public static String BigDecimalToString(BigDecimal number) {
       if(number == null){
    	   return null;
       }else{
    	   return ((Double)(number.doubleValue())).toString();
       }
    }
    
    /**
     * stringToBigDecimal: converts a string to a big decimal
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Custom Routines
     * 
     * {param} BigDecimal("number") input: The Big Decimal to be converted.
     * 
     * {example} BigDecimalToString("number") number.
     */
    public static BigDecimal stringToBigDecimal(String number) {
       if(number == null || number.equals("")){
    	   return new BigDecimal(0);
       }else{
    	   return new BigDecimal(number);
       }
    }
    
    /**
     * SAPDecimalDateToTimeStamp: converts a string to a big decimal
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Custom Routines
     * 
     * {param} String("sapDate") input: Timestamp in decimal format coming from SAP.
     * 
     * {example} SAPDecimalDateToTimeStamp("20101231010101.0") number.
     * @throws ParseException 
     */
    public static Date nullDatetoDefaultDate(Date date) throws ParseException{
    	
    	
    	if(date != null){
    		return date;
    	}
    	
    	SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
    	String defaultDate = "00010101";
    	Date d = new Date(sdf.parse(defaultDate).getTime());
		return d;
    }	
    
    /**
     * TimestammpToSAPDecimalDate: converts a string to a big decimal
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Custom Routines
     * 
     * {param} String("sapDate") input: Timestamp in decimal format coming from SAP.
     * 
     * {example} SAPDecimalDateToTimeStamp("20101231010101.0") number.
     */
    public static String TimestammpToSAPDecimalDate(String timestamp){
    	if(timestamp.equals("0001-01-01 00:00:01"))
    		return "0.0";
    	
    	String sapDate = timestamp.replace(" ", "");
    	sapDate = sapDate.replace("-", "");
    	sapDate = sapDate.replace(":", "");
    	sapDate = sapDate +".0";
    	return sapDate;
    }	
    
    /**
     * SAPDecimalDateToTimeStamp: converts a string to a big decimal
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Custom Routines
     * 
     * {param} String("sapDate") input: Timestamp in decimal format coming from SAP.
     * 
     * {example} SAPDecimalDateToTimeStamp("20101231010101.0") number.
     */
    public static String SAPDecimalDateToTimeStamp(String sapDate){
    	
    	String timestamp = (sapDate.length() != 16 ?DEFAULT_DATE:(sapDate.substring(0,8)+" "+sapDate.substring(8,10)+":"+sapDate.substring(10,12)+":"+sapDate.substring(12, 14)));
    	return timestamp;
    }
    
    
    /**
     * getYear: extracts the year as an integer from a Date
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Custom Routines
     * 
     * {param} Date(date,format) input: The date from which the year needs to be extracted.
     * 
     * {example} getYear("2015-01-01","yyyy-MM-dd") 2015.
     */
    public static int getYear(Date date, String format){
    	
    	if(date==null) return 0;
    	SimpleDateFormat sFormat = new SimpleDateFormat(format);
    	Calendar calendar = Calendar.getInstance();
    	calendar.setTime(date);
    	return calendar.get(Calendar.YEAR);
    }	
    
    /**
     * getMonth: extracts the month as an integer from a Date
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Custom Routines
     * 
     * {param} Date(date,format) input: The date from which the month needs to be extracted.
     * 
     * {example} getMonth("2015-01-01","yyyy-MM-dd") 1.
     */
    public static int getMonth(Date date, String format){
    	Calendar calendar = Calendar.getInstance();
    	calendar.setTime(date);
    	return (1+calendar.get(Calendar.MONTH));
    }	
    
    /**
     * getQuarter: returns the quarter to which the date belongs
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Custom Routines
     * 
     * {param} Date(date,format) input: The date from which the month needs to be extracted.
     * 
     * {example} getQuarter("2015-01-01","yyyy-MM-dd") 1.
     */
    public static int getQuarter(Date date, String format){
    	if(date==null) return 0;
    	SimpleDateFormat sFormat = new SimpleDateFormat(format);
    	Calendar calendar = Calendar.getInstance();
    	calendar.setTime(date);
    	int month = 1 + calendar.get(Calendar.MONTH);
    	
    	if(month <=3){
    		return 1;
    	}else if(month <=6){
    		return 2;
    	}else if(month <=9){
    		return 3;
    	}else if(month <=12){
    		return 4;
    	}
    	
    	return -1;
    }	
    
    
    /**
     * getMonth: extracts the day of month as an integer from a Date
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Custom Routines
     * 
     * {param} Date(date,format) input: The date from which the day needs to be extracted.
     * 
     * {example} getDay("2015-01-01","yyyy-MM-dd") 1.
     */
    public static int getDay(Date date, String format){
    	SimpleDateFormat sFormat = new SimpleDateFormat(format);
    	Calendar calendar = Calendar.getInstance();
    	calendar.setTime(date);
    	return calendar.get(Calendar.DAY_OF_MONTH);
    }	
    
    
    /**
     * getFirstDayOfMonth: Returns the date for the first day of the month represented by this date.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Custom Routines
     * 
     * {param} getFirstDayOfMonth("date","format") input: The current date for which we need the first day of the month. Format is the date format using standard java mnemonics.
     * 
     * {example} getFirstDayOfMonth("2015-01-23","yyyy-MM-dd")  returns "2015-01-01".
     */
    public static Date getFirstDayOfMonth(Date date, String format){
    	SimpleDateFormat sFormat = new SimpleDateFormat("yyyy-MM-dd");
    	Calendar calendar = Calendar.getInstance();
    	calendar.setTime(date);
    	int year = calendar.get(Calendar.YEAR);
    	int month = 1 + calendar.get(Calendar.MONTH);
    	
    	String firstDay = year + "-" + month + "-01";
    	
    	try {
			return sFormat.parse(firstDay);
		} catch (ParseException e) {
			return null;
		}
    }	
    
    /**
     * isNull: Takes in two parameters. If the first param is null, returns the second param, else returns the first param.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Custom Routines
     * 
     * {param} isNull(param1,"format") input: The param to be checked for nullity and the second param that should be returned if null.
     * 
     * {example} isNull(null,"ssss") returns sss.
     */
    public static Object isNull(Object object, Object value){
    	if(object != null){
    		return object;    		
    	}
    	
    	if(object instanceof String){
    		return (String)value;	
    	}else if(object instanceof Integer){
    		return (Integer)value;	
    	}else if(object instanceof Float){
    		return (Float)value;	
    	}else{
    		return value;
    	}
    }	
    
    
    /**
     * getStringHash: Takes an array of Strings and returns a hash value for them.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Custom Routines
     * 
     * {param} getStringHash(String[] args) input: The array of strings for which a hash needs to be calculated.
     * 
     * {example} getStringHash({"string1",null,"string2"}) returns some hash value of type String.
     */
    public static String getStringHash(String[] strings){
    	
    	StringBuffer hash = new StringBuffer("");
    	
    	for(int a=0;a<strings.length;a++){
    		String string = strings[a];
    		
    		if(string==null){
    			continue;
    		}
    	
    		int len = string.length();
    		
    		if(len <= 20){
    			hash.append(string);
    		}else{
    			hash.append(string.substring(0, 20));
    		}
    	}	
    	return hash.toString();
    }	
    
    /**
     * getStringHash: Takes an array of Strings and returns a hash value for them.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Custom Routines
     * 
     * {param} getStringHash(String[] args) input: The array of strings for which a hash needs to be calculated.
     * 
     * {example} getStringHash({"string1",null,"string2"}) returns some hash value of type long.
     */
    public static long getLongHash(String[] strings){
    	long hash = 0;
   	
    	for(int a=0;a<strings.length;a++){
    		String string = strings[a];
    		
    		if(string==null){
    			hash -= PRIMES2[0];
    			continue;
    		}
    	
    		int len = string.length();
    		if(len > 20){
    			len=20;
    		}
    		
    		for(int i=0;i<len;i++){
    			hash += string.charAt(i)*PRIMES2[i];
    		}	
    	}
    	return hash;
    }
}
