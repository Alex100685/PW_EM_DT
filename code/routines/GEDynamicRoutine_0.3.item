package routines;

import java.io.IOException;
import java.io.Writer;
import java.sql.Date;


import routines.system.DBMSConstants;
import routines.system.Dynamic;
import routines.system.DynamicMetadata;
import routines.system.FormatterUtils;

public class GEDynamicRoutine {

    /**
     * returnDataAsString: return the Dynamic Data as a String with the expected Delimiter
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("world") input: The string need to be printed.
     * {example} helloExemple("world") # hello world !.
     */
    public static String HAWQ_ADDITIONAL_COLUMNS_DATA(String ADDITIONAL_COLS, String delimiter) {
    	
    	if(ADDITIONAL_COLS != null && ADDITIONAL_COLS.equals("") != true)
    	
    		return delimiter + "False" + delimiter + "" + delimiter + "" + delimiter  + TalendDate.getDate("yyyy-MM-dd HH:mm:ss");
    	
    	else
    		
    		return "";
    }
    
    /**
     * returnDataAsString: return the Dynamic Data as a String with the expected Delimiter
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("world") input: The string need to be printed.
     * {example} helloExemple("world") # hello world !.
     */
    public static String returnDataAsString(Dynamic column, String delimiter) throws IOException {
 
        StringBuilder sb = new StringBuilder();
        if (column != null) {
          for (int i = 0; i < column.getColumnCount(); i++) {
            sb.append(String.valueOf(column.getColumnValue(i)).replace("\\","\\\\").replace(delimiter,"\\" + delimiter));
            if(i!=column.getColumnCount()-1){
            	sb.append(delimiter);
            }
          }
          return sb.toString().replaceAll("\\\n", "").replaceAll("null","").replaceAll("\\u0000","").replaceAll("\\x00", "").replaceAll("\\\r",""); 
          }
        else 
         return null;

    }
    
    public static String returnColumnNames(Dynamic column, String delimiter) throws IOException {

        StringBuilder sb = new StringBuilder();
        if (column != null) {     
        	for (int i = 0; i < column.getColumnCount(); i++) {
			DynamicMetadata metadata = column.getColumnMetadata(i);
        	
        	  sb.append(String.valueOf(metadata.getName()));
        	  sb.append(" ");
        	  sb.append(String.valueOf(metadata.getType()));
        	
        	if (i != (column.getColumnCount() - 1)) 
        	  sb.append(delimiter);
        	}
          return sb.toString().replace("\\","\\\\").replaceAll("\\\n", "").replaceAll("null","")
          	.replaceAll("\\u0000","").replaceAll("\\x00", "").replaceAll("\\\r","");
        }
        else 
         return null;
    }
    }




