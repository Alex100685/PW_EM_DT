package routines;

import java.io.IOException;
import java.io.Writer;
import java.sql.Date;


import routines.system.DBMSConstants;
import routines.system.Dynamic;
import routines.system.DynamicMetadata;
import routines.system.FormatterUtils;

public class GEDynamicRoutine {

    /**
     * returnDataAsString: return the Dynamic Data as a String with the expected Delimiter
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("world") input: The string need to be printed.
     * {example} helloExemple("world") # hello world !.
     */
//    public static String HAWQ_ADDITIONAL_COLUMNS_DATA(String ADDITIONAL_COLS, String delimiter, Boolean HVR_Date) {
//    	
//    	if(ADDITIONAL_COLS != null && ADDITIONAL_COLS.equals("") != true)
//    	
//    		return delimiter + "False" + delimiter + "" + delimiter + "" + delimiter  + TalendDate.getDate("yyyy-MM-dd HH:mm:ss");
//    	
//    	else {
//               if (HVR_Date) {
//				
//    			return delimiter + TalendDate.getDate("yyyy-MM-dd");
//			                 } 
//    		else 
//    			return "";
//    	}
//    		
//    	
//    }
	public static String HAWQ_ADDITIONAL_COLUMNS_DATA(String additionalCols, String delimiter){
	//String delimiter = delimit;
	//String additionalCols = ADDITIONAL_COLS;
	//public static String HAWQ_ADDITIONAL_COLUMNS_DATA(String ADDITIONAL_COLS, String delimiter) {
	String forReturn = "";
	if(additionalCols == null || additionalCols.length() <= 5 ) {
	      forReturn = "";
	} else if(additionalCols.contains("/*+")) {
	  for(String str : additionalCols.split("/[*][+]") ) {
	      if(str.contains("*/") ) {
	            String temp = str.split("[*]/")[0];
	            if(temp.startsWith("'") ) {
	                  if(temp.endsWith("'")) {
	                        forReturn += delimiter + temp.substring(1,temp.length()-1);
	                  } else throw new RuntimeException(" additional column string not valid");
	            } else if ("sysdate".equals(temp)) {
	                  forReturn += delimiter + TalendDate.getDate("yyyy-MM-dd");
	            } else if ("sysdatetime".equals(temp)) {
	                 forReturn += delimiter + TalendDate.getDate("yyyy-MM-dd HH:mm:ss");
	           } else if ("systime".equals(temp)) {
	                 forReturn += delimiter + TalendDate.getDate("HH:mm:ss"); 
	            } else if ("null".equals(temp)) { 
	                  forReturn += delimiter + "\\N";
	           } else {
	                 forReturn += delimiter + "\\N";
	            }
	      } /* contains * / */
	  }
//	  forReturn = forReturn.substring(0, forReturn.length() - delimiter.length()); // remove the last delimiter
	} else {
	//for backward compatibility
	      forReturn = delimiter + "False" + delimiter + "" + delimiter + "" + delimiter  + TalendDate.getDate("yyyy-MM-dd HH:mm:ss");
	      
	}
	return forReturn;
	}
	

	//return forReturn;
	//}

	
	
    /**
     * returnDataAsString: return the Dynamic Data as a String with the expected Delimiter
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("world") input: The string need to be printed.
     * {example} helloExemple("world") # hello world !.
     */
    public static String returnDataAsString(Dynamic column, String delimiter) throws IOException {
    	 
        StringBuilder sb = new StringBuilder();
        if (column != null) {
          for (int i = 0; i < column.getColumnCount(); i++) {
            if(column.getColumnValue(i)==null) {
              sb.append("\\N");
            } else {
              if(column.getColumnMetadata(i).getType().equals("id_byte[]")){
            	  byte[] bytearray = (byte[])column.getColumnValue(i);
            	  for(int bi = 0; bi < bytearray.length; bi++){
            		  sb.append("\\\\");
	  					String octalValue = Integer.toOctalString(bytearray[bi]);
	  					if(octalValue.length() > 3) {
	  						sb.append(Integer.parseInt(octalValue.substring(8,11))-400);
	  					} else {
	  						if(octalValue.length() ==  2) sb.append("0");
	  						if(octalValue.length() ==  1) sb.append("00");
	  						sb.append(octalValue);
	  					}
            	  }
              } /*else if(column.getColumnMetadata(i).getType().equals("id_byte")){
          		sb.append("\\\\");
          		sb.append(Integer.toOctalString(Byte.parseByte(column.getColumnValue(i).toString())).substring(0,1) );
          		sb.append(Integer.toOctalString(Byte.parseByte(column.getColumnValue(i).toString())).substring(9,11) );
              } */
               else 
            	sb.append(String.valueOf(column.getColumnValue(i)).replace("\\","\\\\").replace(delimiter,"\\" + delimiter));
            }
            if(i!=column.getColumnCount()-1){
              sb.append(delimiter);
            }
          }
          return sb.toString().replaceAll("\\\n", "\\\\012").replaceAll("\\u0000","").replaceAll("\\x00", "").replaceAll("\\\r","\\\\015"); 
          }
        else 
         return null;


    }
    
    public static String returnColumnNames(Dynamic column, String delimiter) throws IOException {

        StringBuilder sb = new StringBuilder();
        if (column != null) {     
        	for (int i = 0; i < column.getColumnCount(); i++) {
			DynamicMetadata metadata = column.getColumnMetadata(i);
        	
        	  sb.append(String.valueOf(metadata.getName()));
        	  sb.append(" ");
        	  sb.append(String.valueOf(metadata.getType()));
        	
        	if (i != (column.getColumnCount() - 1)) 
        	  sb.append(delimiter);
        	}
          return sb.toString().replace("\\","\\\\").replaceAll("\\\n", "").replaceAll("null","")
          	.replaceAll("\\u0000","").replaceAll("\\x00", "").replaceAll("\\\r","");
        }
        else 
         return null;
    }
    }




