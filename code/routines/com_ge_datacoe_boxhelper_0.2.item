package routines;


import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import java.net.URL;
import java.net.URLConnection;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import com.box.sdk.BoxAPIConnection;
import com.box.sdk.BoxAPIException;
import com.box.sdk.BoxCollaboration;
import com.box.sdk.BoxFile;
import com.box.sdk.BoxFolder;
import com.box.sdk.BoxItem;
import com.box.sdk.BoxSharedLink;
import com.box.sdk.BoxWebLink;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import routines.system.JSONObject;


public class com_ge_datacoe_boxhelper {
	 private static final java.util.Map<String, String> getTokenResponse = new java.util.HashMap<String, String>();
	    
	    public static synchronized String getToken(String clientId, String clientSecret, String SSO) {
	        
	        SimpleDateFormat dateFormatGmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	        dateFormatGmt.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
	       
	        try {
	            if ( getTokenResponse.containsKey(clientId + "__" + clientSecret + "__" + SSO)) {
	                JSONObject obj = new JSONObject(getTokenResponse.get(clientId + "__" + clientSecret + "__" + SSO));
	                if( dateFormatGmt.parse(obj.get("expires").toString()).after( dateFormatGmt.parse( dateFormatGmt.format(new Date()) ) ) ) {
	                    return obj.get("token").toString();
	                } else {
	                    java.util.Random rand = new java.util.Random(); 
	                    int wait_sec = rand.nextInt(5);
	                    System.out.println("Curr time: " + dateFormatGmt.format(new Date()) + " response: " + getTokenResponse.get(clientId + "__" + clientSecret + "__" + SSO));
	                    System.out.println("Local token expired obtaining a new token from server after: " + wait_sec + "second(s).");
	                    Thread.sleep(wait_sec*1000);
	                }
	            } else {
	                System.out.println("Local cache was empty obtaining a new token from server.");
	            }
	            String body = "";

	            URL url = new URL("http://alpcisdappa14c.corporate.ge.com/box/getToken.php" +
	                    "?env=prod" +
	                    "&AkanaClientID=" + clientId +
	                    "&AkanaClientSecret=" + clientSecret +
	                    "&sso=" + SSO);

	            URLConnection con = url.openConnection();
	            InputStream in = con.getInputStream();
	            String encoding = con.getContentEncoding();
	            encoding = encoding == null ? "UTF-8" : encoding;

	            StringBuilder sb = new StringBuilder();
	            BufferedReader br = new BufferedReader(new InputStreamReader(in));

	            String read;
	            while ((read = br.readLine()) != null) {
	                sb.append(read);
	            }

	            br.close();
	            body = sb.toString();
	            //System.err.println(body);
	            if(body.contains("token")) getTokenResponse.put(clientId + "__" + clientSecret + "__" + SSO, body);
	            JSONObject obj = new JSONObject(body);
	            return obj.get("token").toString();
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        return "";
	    }

    public static String getMail(String SSO) {
        String body = "";
        try {

            URL url = new URL("http://alpcisdappa14c.corporate.ge.com/box/gal_lookup.php" +
                    "?sso=" + SSO);
            URLConnection con = url.openConnection();
            InputStream in = con.getInputStream();
            String encoding = con.getContentEncoding();
            encoding = encoding == null ? "UTF-8" : encoding;

            StringBuilder sb = new StringBuilder();
            BufferedReader br = new BufferedReader(new InputStreamReader(in));

            String read;
            while ((read = br.readLine()) != null) {
                //System.out.println(read);
                sb.append(read);
            }

            br.close();
            body = sb.toString();
            JSONObject obj = new JSONObject(body);
            return obj.get("mail").toString();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            System.err.println(body);
            e.printStackTrace();

        }
        return "";
    }

    public static void initProxy() {
    	//System.setProperty("https.proxyHost", "PITC-Zscaler-ASPAC-Singapore3PR.proxy.corporate.ge.com"); 
        System.setProperty("https.proxyHost", "CIS-Cinci-pitc-SSOW.proxy.corporate.gtm.ge.com");
        //System.setProperty("https.proxyHost", "PITC-Zscaler-EMEA-Amsterdam3PR.proxy.corporate.ge.com");
        System.setProperty("https.proxyPort", "80");
    }

    public static void sslCertBypass() {
        javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[]{new javax.net.ssl.X509TrustManager() {
            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                return null;
            }

            public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
            }

            public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
            }
        }};


        // Activate the new trust manager

        javax.net.ssl.SSLContext sc;
        try {
            sc = javax.net.ssl.SSLContext.getInstance("SSL");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

	public static String fixBadNames(String boxObjectName) {
		String forReturn = boxObjectName.replace("\\","_").replace("/","_").replace("\"","_")
		.replace("*","_").replace("?","_").replace("<","_")
		.replace(">","_").replace("|","_").replace("&","_")
		.replaceAll("[^\\x00-\\x7F]", "").trim();
		if(forReturn.matches("^[0-9|.| |\\-]*$") ) { return forReturn+"_"; }
		if(forReturn.length()> 255) return forReturn.substring(0,254);
		return forReturn;
	}

	
	public static void init() {
		initProxy();
		sslCertBypass();
	}
    //******************************Create Folder****************************************************************/
    public static String createBoxFolder(String clientId, String clientSecret, String SSO, String boxParentFolderId, String boxFolderName) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        
        System.out.println("**************Creating folder**************************");
        System.out.println("Parent FolderID is: " + boxParentFolderId);
        System.out.println("Folder name is: " + boxFolderName);
        
        while (tryAmount++ < 5) {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                //This is a folder where we want to create the project folders
                BoxFolder folder = new BoxFolder(api, boxParentFolderId);

                BoxFolder.Info folderInfo = folder.createFolder(com_ge_datacoe_boxhelper.fixBadNames(boxFolderName));
                return folderInfo.getID();
            } catch (BoxAPIException a) {

                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                if(a.getResponse() != null) {
                	resJSON = (JsonObject) parser.parse(a.getResponse());

                	if (resJSON.get("code").getAsString().equals("item_name_in_use")) {
                		return resJSON.get("context_info").getAsJsonObject()
                            .get("conflicts").getAsJsonArray()
                            .get(0).getAsJsonObject()
                            .get("id").getAsString();
                	}
                }
                e = a;
                Thread.sleep(1000);
                
            }
        }
        System.out.println("************************************************************");
        throw e;
    }
    //******************************Update Folder Description****************************************************************/
    public static void updateBoxFolderDescription(String clientId, String clientSecret, String SSO, String folderId, String folderDescription) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        
        while (tryAmount++ < 5) {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                //This is a folder where we want to update the description
                BoxFolder folder = new BoxFolder(api, folderId);

                BoxFolder.Info folderInfo = folder.getInfo();
                folderInfo.setDescription(folderDescription.replaceAll("[^\\x00-\\x7F]", "").trim());
                folder.updateInfo(folderInfo);
                return;
            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                resJSON = (JsonObject) parser.parse(a.getResponse());
                System.out.println(a.getResponse());
                //return a.getResponse();
                e = a;
                Thread.sleep(1000);
            }
        }
        throw e;
    }
    //****************************Create File or upload new version****************************************************/
    public static String createBoxFile (String clientId, String clientSecret, String SSO, String folderId, String fileName, String fileLocation) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        
        boolean fileExist = false;
        String fileId = "";
        
        int tryAmount = 0;
        
        System.out.println("******************Uploading file*****************************");
        System.out.println("File Name: " + fileName);
        System.out.println("Parent Folder Id: " + folderId);
        System.out.println("File Source location: " + fileLocation);
        
        
        
        while (tryAmount++ < 5) {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                //Do the copy
                FileInputStream fis = null;
                File uncompressed_file = new File(fileLocation);
                fis = new FileInputStream(uncompressed_file);
                
                if(fileExist==false) {
                    //This is the folder
                    BoxFolder folder = new BoxFolder(api, folderId);
                    System.out.println("Trying to upload as new file...");
                    BoxFile.Info uploadInfo = folder.uploadFile(fis, com_ge_datacoe_boxhelper.fixBadNames(fileName));
                    System.out.println("Uploaded as whole new!! version 1");
                    return uploadInfo.getID();
                } else {
                    BoxFile file = new BoxFile(api, fileId);
                    System.out.println("File exists. Trying to upload new version...");
                    file.uploadVersion(fis);
                    System.out.println("File existed. Upload finished as new version!!");
                    return fileId;
                }

            } catch (BoxAPIException a) {
                if(a.getResponse() != null ) {
                    JsonParser parser = new JsonParser();
                    JsonObject resJSON = new JsonObject();
                	resJSON = (JsonObject) parser.parse(a.getResponse());
                	if (resJSON.get("code").getAsString().equals("item_name_in_use")) {
                		
                		fileId = resJSON.get("context_info").getAsJsonObject()
                            	.get("conflicts").getAsJsonObject()
                            	.get("id").getAsString();
                		fileExist = true;
                	} else {
                		e = a;
                		Thread.sleep(1000);
                	}
                } else {
                	e = a;
            		Thread.sleep(1000);
                }
            }
        }
        System.out.println("************************************************************");
        throw e;
    }
    
    
    
    
    //****************************Download box file by name***************************************************/
    public static void downloadBoxFileByName (String clientId, String clientSecret, String SSO, String folderId, String fileName, String targetFolder) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        
        String fileId = "";
        
        int tryAmount = 0;
        while (tryAmount++ < 5) {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                //get fileId in the folder 
                BoxFolder folder = new BoxFolder(api, folderId);
                
                /*
                Iterable<BoxItem.Info> results = folder.search("\""+fileName+"\"");
                for (BoxItem.Info result : results) {
                	fileId = result.getID();
                	System.out.println("fileID found in box: " + fileId);
                }
                */
                
                
                for (BoxItem.Info itemInfo : folder) {
                    if (itemInfo instanceof BoxFile.Info) {
                        BoxFile.Info fileInfo = (BoxFile.Info) itemInfo;
                        if(itemInfo.getName().contains(fileName)) {
                        	System.out.println("Item found:" + itemInfo.getName());
                        	fileId = itemInfo.getID();
                        }
                    } 
                }
                
                
                if (fileId.equals("")) {
                	System.out.println("No file (" + fileId + ") found in the BOX, has to create new one");
                } else {                                
                	//download File
                	BoxFile file = new BoxFile(api, fileId);
                	BoxFile.Info info = file.getInfo();

                	FileOutputStream stream = new FileOutputStream(new File ( targetFolder +"/" + info.getName() ) );
                	file.download(stream);
                	stream.close();
                	System.out.println("Hash file found in BOX, downloading...");
                }
                             
                return;
            } catch (BoxAPIException a) {
                if(a.getResponse() != null ) {
                	System.err.println("Error when download file: " + fileName + " message: " + a.getResponse());
                	a.printStackTrace();
                }
                e = a;
            	Thread.sleep(1000);
            }
        }
        throw e;
    }
    
    
    
    
    
    
    
    
    
    //***********************************File Description upload***********************************************************/
    
    public static String updateBoxFileDescription(String clientId, String clientSecret, String SSO, String fileId, String fileDescription) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        
        while (tryAmount++ < 5)
        {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
                //Define input and destination files
              
                
                //Define description
                BoxFile file = new BoxFile(api, fileId);
                
                //Do the Description change
                BoxFile.Info fileInfo = file.getInfo();
                fileInfo.setDescription(fileDescription.replaceAll("[^\\x00-\\x7F]", "").trim());
                file.updateInfo(fileInfo);
                
                return fileId;

            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                resJSON = (JsonObject) parser.parse(a.getResponse());
                System.out.println(a.getResponse());
                //return a.getResponse();
                e = a;
                Thread.sleep(1000);
            }
        }
        throw e;
    }
    
    
    //***********************************Get File share link external (long, expiring)***********************************************************/
    
    public static URL getBoxFileSharedLinkExternal(String clientId, String clientSecret, String SSO, String fileId) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        while (tryAmount++ < 5)
        {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
                //Define description
                BoxFile file = new BoxFile(api, fileId);
                
                return file.getDownloadURL();

            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                resJSON = (JsonObject) parser.parse(a.getResponse());
                System.out.println(a.getResponse());
                //return a.getResponse();
                e = a;
                Thread.sleep(1000);
            }
        }
        throw e;
    }
    
       
    //***********************************Get File share link***********************************************************/
    
    public static String getBoxFileSharedLink(String clientId, String clientSecret, String SSO, String fileId) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        while (tryAmount++ < 5)
        {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
                //Define description
                BoxFile file = new BoxFile(api, fileId);
                BoxFile.Info info = file.getInfo();
                String parentId = info.getParent().getID();
                
                
                String readableUrl = "https://ge.app.box.com/files/0/f/"+parentId+"/1/f_"+fileId;
                
                return readableUrl;

            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                resJSON = (JsonObject) parser.parse(a.getResponse());
                System.out.println(a.getResponse());
                //return a.getResponse();
                e = a;
                Thread.sleep(1000);
            }
        }
        throw e;
    }
    
    
    //***********************************Get Folder share link***********************************************************/
    
    public static String getBoxFolderSharedLink(String clientId, String clientSecret, String SSO, String folderId, String userSSO) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        String readableUrl = "";
        
        while (tryAmount++ < 5)
        {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
            

                
                //Define description
                BoxFolder folder = new BoxFolder(api, folderId);
                BoxFolder.Info info = folder.getInfo();
                //String folderId = info.getParent().getID();
                String folderName = info.getName();
                readableUrl = "https://ge.ent.box.com/files/0/f/"+folderId+ "/"+ folderName;                
                
                //share folder
                //Collection<BoxCollaboration.Info> collaborations = folder.getCollaborations();

                folder.collaborate(com_ge_datacoe_boxhelper.getMail(userSSO), BoxCollaboration.Role.EDITOR);
                
                return readableUrl;

            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                resJSON = (JsonObject) parser.parse(a.getResponse());
                if (resJSON.get("code").getAsString().equals("user_already_collaborator")) {
                	return readableUrl;
                	
                } else {
                    e = a;
                    Thread.sleep(1000);
                }
            }
        }
        throw e;
    }
    
    
    
    //******************************Delete a Folder****************************************************************/
    public static void deleteBoxFolder(String clientId, String clientSecret, String SSO, String folderId, Boolean recursive) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        while (tryAmount++ < 5) {
            try {
                //create a connection 
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                //This is a folder where we want to update the description
                BoxFolder folder = new BoxFolder(api, folderId);

                folder.delete(recursive);

                return;
            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                resJSON = (JsonObject) parser.parse(a.getResponse());
                if (resJSON.get("code").getAsString().equals("folder_not_empty")) {                
                	throw new Exception ("Non-recursive delete selected but the folder is not empty");
                } else {
                    e = a;
                    Thread.sleep(1000);
                }
            }
        }
        throw e;
    }
    
    
  
    //***********************************Delete a file***********************************************************/
    
    public static String deleteBoxFile(String clientId, String clientSecret, String SSO, String fileId) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        while (tryAmount++ < 5)
        {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
                //Define description
                BoxFile file = new BoxFile(api, fileId);
                file.delete();
        
                return fileId;

            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                resJSON = (JsonObject) parser.parse(a.getResponse());
                System.out.println(a.getResponse());
                //return a.getResponse();
                e = a;
                Thread.sleep(1000);
            }
        }
        throw e;
    }
    
    
    //***********************************Get folder and file info within a specific folder***********************************************************/
    public static List<BoxItem.Info> listBox(String clientId, String clientSecret, String SSO, String parentFolderId, String objectType, Boolean includeSubDirectories) throws Exception {
    	return listBox(clientId, clientSecret, SSO, parentFolderId, objectType, includeSubDirectories, 0,2);
    }
    public static List<BoxItem.Info> listBox(String clientId, String clientSecret, String SSO, String parentFolderId, String objectType, Boolean includeSubDirectories, int currLevel, int maxLevel) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        
        currLevel++;
        
        objectType = objectType.toUpperCase();
        if(objectType.equals("FOLDERS")){
        	objectType = "DIRECTORIES";
        }
        if(!objectType.equals("FILES") && !objectType.equals("DIRECTORIES") && !objectType.equals("BOTH") ) {
        	throw new Exception("objectType must be one of the following: FILES / DIRECTORIES / BOTH");
        }
        
        int tryAmount = 0;
        while (tryAmount++ < 5)
        {
            List<BoxItem.Info> myList = new ArrayList<BoxItem.Info>();
            //myList.get(0).get
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
                //Define description
                
                BoxFolder folder = new BoxFolder(api, parentFolderId);
                for (BoxItem.Info itemInfo : folder) {
                	   	if (itemInfo instanceof BoxFile.Info && (objectType.equals("FILES") || objectType.equals("BOTH") ) ) {
                    		BoxFile.Info fileInfo = (BoxFile.Info) itemInfo;
                    		myList.add(fileInfo);
                    	} else if (itemInfo instanceof BoxFolder.Info ) {
                    		BoxFolder.Info folderInfo = (BoxFolder.Info) itemInfo;
                    		if( objectType.equals("DIRECTORIES") || objectType.equals("BOTH") ) {
                    			myList.add(folderInfo);
                    		}
                    		//To understand recursion you must understand recursion first :)
                    		if( includeSubDirectories && currLevel <= maxLevel) {
                    			myList.addAll(listBox(clientId, clientSecret, SSO, folderInfo.getID(), objectType, includeSubDirectories, currLevel, maxLevel));
                    		}
                    	}
                }

                return myList;

            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                System.out.println(a.getMessage() + "_" + a.getResponse());
                //resJSON = (JsonObject) parser.parse(a.getResponse());
                //return a.getResponse();
                e = a;
                Thread.sleep(1000);
            }
        }
        throw e;
    }
    
    
  //***********************************Create BOX file from String***********************************************************/
    public static String createBoxFileFromString (String clientId, String clientSecret, String SSO, String folderId, String fileName, String fileContent) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        
        boolean fileExist = false;
        String fileId = "";
        if(fileContent == null) fileContent = "";
        
        int tryAmount = 0;
        while (tryAmount++ < 5) {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                //Do the copy
                InputStream fis = new ByteArrayInputStream(fileContent.getBytes("UTF-8"));
                
                if(fileExist==false) {
                    //This is a folder where we want to update the description
                    BoxFolder folder = new BoxFolder(api, folderId);

                    BoxFile.Info uploadInfo = folder.uploadFile(fis, com_ge_datacoe_boxhelper.fixBadNames(fileName));
                    return uploadInfo.getID();
                } else {
                    BoxFile file = new BoxFile(api, fileId);
                    file.uploadVersion(fis);
                    return fileId;
                }

            } catch (BoxAPIException a) {
                if(a.getResponse() != null ) {
                    JsonParser parser = new JsonParser();
                    JsonObject resJSON = new JsonObject();
                	resJSON = (JsonObject) parser.parse(a.getResponse());
                	if (resJSON.get("code").getAsString().equals("item_name_in_use")) {
                		fileExist = true;
                		fileId = resJSON.get("context_info").getAsJsonObject()
                            	.get("conflicts").getAsJsonObject()
                            	.get("id").getAsString();
                	} else {
                		e = a;
                		Thread.sleep(1000);
                	}
                } else {
                	e = a;
            		Thread.sleep(1000);
                }
            }
        }
        throw e;
    }
    
  //***********************************Does the FileId exist in BOX?***********************************************************/

    public static String checkBoxFileExists (String clientId, String clientSecret, String SSO, String fileId) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
      
        int tryAmount = 0;
        while (tryAmount++ < 5) {
            try {
                //create a connection 
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                BoxFile file = new BoxFile(api, fileId);
                BoxFile.Info info = file.getInfo("id");
       
                return "ok";
            } catch (BoxAPIException a) {
            	if(a.getResponse() != null ) {
                    JsonParser parser = new JsonParser();
                    JsonObject resJSON = new JsonObject();
                	resJSON = (JsonObject) parser.parse(a.getResponse());
                	if (resJSON.get("code").getAsString().equals("not_found")) {
	                		return "not found";                				
                	} else {
                		e = a;
                		Thread.sleep(1000);
                	}
            	}
            }
            
        }
        return "error";
    }
    
    
    //***********************************Does the FolderId exist in BOX?***********************************************************/
    
    public static String checkBoxFolderExists (String clientId, String clientSecret, String SSO, String folderId) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
      
        int tryAmount = 0;
        while (tryAmount++ < 5) {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                BoxFolder folder = new BoxFolder(api, folderId);
                BoxFolder.Info info = folder.getInfo("id");
       
                return "ok";
            } catch (BoxAPIException a) {
            	if(a.getResponse() != null ) {
                    JsonParser parser = new JsonParser();
                    JsonObject resJSON = new JsonObject();
                	resJSON = (JsonObject) parser.parse(a.getResponse());
                	if (resJSON.get("code").getAsString().equals("not_found")) {
	                		return "not found";                				
                	} else {
                		e = a;
                		Thread.sleep(1000);
                	}
            	}
            }
            
        }
        return "error";
    }
    
    
   //***********************************Create WebLink / Bookmark***********************************************************/
    
    public static void createBoxWebLink(String clientId, String clientSecret, String SSO, String folderId, String bookmarkName, String bookmarkUrl) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        
        boolean bookmarkExist = false;
        String bookmarkId = "";
        int tryAmount = 0;
        while (tryAmount++ < 5)
        {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
                
                URL url = new URL(bookmarkUrl);
                BoxFolder folder = new BoxFolder(api, folderId);
                
                if(bookmarkExist==false) {
                	//create WebLink/bookmark
                	folder.createWebLink(bookmarkName, url);
                	return;
                } else {
                	System.out.println("Bookmark already exists");
                	//BoxWebLink webLink = new BoxWebLink(api, bookmarkId);
                	//BoxWebLink.Info info = webLink.getInfo();
                	//info.setName(bookmarkName);
                	//no function found to set URL
                	//webLink.updateInfo(info);
                	return;
                }
                    
                

            } catch (BoxAPIException a) {
                if(a.getResponse() != null ) {
                    JsonParser parser = new JsonParser();
                    JsonObject resJSON = new JsonObject();
                	resJSON = (JsonObject) parser.parse(a.getResponse());
                	if (resJSON.get("code").getAsString().equals("item_name_in_use")) {
                		bookmarkExist = true;
                		bookmarkId = resJSON.get("context_info").getAsJsonObject()
                            	.get("conflicts").getAsJsonObject()
                            	.get("id").getAsString();
                		System.out.println("Bookmark already exists");
                	} else {
                		e = a;
                		Thread.sleep(1000);
                	}
                } else {
                	e = a;
            		Thread.sleep(1000);
                } 
            }
        }
        throw e;
    }
    
    
}