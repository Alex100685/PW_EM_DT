package routines;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class BigDecimalUtility {

	/**
	 * helloExample: not return value, only print "hello" + message.
	 * 
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} User Defined
	 * 
	 * {param} string("world") input: The string need to be printed.
	 * 
	 * {example} helloExemple("world") # hello world !.
	 */
	public static void helloExample(String message) {
		if (message == null) {
			message = "World"; //$NON-NLS-1$
		}
		System.out.println("Hello " + message + " !"); //$NON-NLS-1$ //$NON-NLS-2$
	}

	public static BigDecimal maxValue(BigDecimal b1, BigDecimal b2,
			BigDecimal b3) {

		BigDecimal maxValue = null;
		if (b1 != null & b2 != null && b3 != null){
			if (b1.compareTo(b2) == 1 && b1.compareTo(b3) == 1)

				maxValue = b1;

			else if (b2.compareTo(b1) == 1 && b2.compareTo(b3) == 1)

				maxValue = b2;

			else
				maxValue = b3;
		}
		return maxValue;
	}

	public static BigDecimal maxValue(BigDecimal b1, BigDecimal b2) {
		BigDecimal maxValue = null;
		if (b1 != null && b2 != null) {

			if (b1.compareTo(b2) == 1)

				maxValue = b1;

			else
				maxValue = b2;

		} 

		return maxValue;
	}

	public static BigDecimal addBigDecimal(BigDecimal b1, BigDecimal b2) {

		if (b1 != null && b2 != null)
			return b1.add(b2);

		else
			return null;

	}

	public static BigDecimal addBigDecimal(BigDecimal b1, BigDecimal b2,
			BigDecimal b3) {
		BigDecimal result = null;
		if (b1 != null && b2 != null & b3 != null) {
			result = addBigDecimal(b1, b2);
		}

		return result;

	}
}
