package routines;

import java.io.IOException;
import java.io.Writer;
import java.sql.Date;

import routines.system.DBMSConstants;
import routines.system.Dynamic;
import routines.system.DynamicMetadata;
import routines.system.FormatterUtils;

public class GEPostgreSQLViewConverter {

    /**
     * returnDataAsString: return the Dynamic Data as a String with the expected Delimiter
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("world") input: The string need to be printed.
     * {example} helloExemple("world") # hello world !.
     */
    public static String returnDataAsString_old(Dynamic data, String delimiter) {
    	
    	StringBuilder sb = new StringBuilder();
		if (data != null) {
			try {
				routines.system.DynamicUtils
						.writeValuesToStringBuilder(data,
								sb,
								delimiter);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return sb.toString().replace("\\","\\\\").replaceAll("\\\n", "").replaceAll("null","").replaceAll("\\u0000","").replaceAll("\\x00", "").replaceAll("\\\r",""); 
    }
    
    /**
     * returnDataAsString: return the Dynamic Data as a String with the expected Delimiter
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("world") input: The string need to be printed.
     * {example} helloExemple("world") # hello world !.
     */
    public static String returnDataAsString(Dynamic column, String delimiter) throws IOException {

        StringBuilder sb = new StringBuilder();
        if (column != null) {
          for (int i = 0; i < column.getColumnCount(); i++) {
        	DynamicMetadata metadata = column.getColumnMetadata(i);
        	if ("id_Date".equals(metadata.getType()) ) {
        	  sb.append(FormatterUtils.format_Date((java.util.Date) column.getColumnValue(i),"MM-dd-YYYY"));
        	} else {
        	  sb.append(String.valueOf(column.getColumnValue(i)));
        	}
        	if (i != (column.getColumnCount() - 1)) 
        	  sb.append(delimiter);
          }
          return sb.toString().replace("\\","\\\\").replaceAll("\\\n", "").replaceAll("null","").replaceAll("\\u0000","").replaceAll("\\x00", "").replaceAll("\\\r","");        
        }
        else 
         return null;
    }
}
