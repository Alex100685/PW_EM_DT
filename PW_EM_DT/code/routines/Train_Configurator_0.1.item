package routines;

import java.io.*;
import java.io.File;
//import java.util.*;  // need for list objects
import java.sql.*;
import jxl.*;
import jxl.Workbook;
import jxl.write.*;
import java.awt.Desktop;

      
public class Train_Configurator {


private String path1 ="C:/glassfish3/jdk/bin/export.xls"; //output file
//private String path1 = "C:/eclipse/eclipse/export.xls";

        Desktop desktop;

  	WritableFont wf; 
	WritableCellFormat cf; 
	WritableWorkbook writableWorkbook;
        WritableSheet writableSheet;
            
int count_n=1; // output position for writing, position 1=line 2 on excel sheet, but for subsequent iterations in 4 loop set to 0
int counter=0;

String plant_name, plant_type, block_id, unit_name, unit_type, oem, unit_id, equip_id, equip_type;


String old_val; //storage value for old unit id, use as compare to current unit id in loop
Connection cn2;	
int rowcount=0; 
PreparedStatement ps;                 
	    

Sheet sheet1,sheet2,sheet3,sheet4,sheet5,sheet6, sheet7;
String region;



public void loadDriver() {


		           //connection to sqlite only

				try {

		         
		          Class.forName("org.sqlite.JDBC");
				  System.out.println("The Driver has been loaded successfully!");
				}   catch (Exception E1) {
			          System.out.println("Unable to load the Driver!");
				  System.out.println("Exceptions:" + E1.toString());
				  System.exit(1);
				}

						
			 //Establishing the connection with the database
					
				try {
				       // cn2 = DriverManager.getConnection("jdbc:sqlite:test.db");
    cn2 = DriverManager.getConnection("jdbc:sqlite:c:\\glassfish3\\jdk\\bin\\test.db");
					System.out.println("Connection to Server was Established");
			        } catch (Exception E2) {
					System.out.println(" Exceptions : " + E2.toString());
			        }



			} // end of load driver method





         public void initComponents() {

try{

                             
            File export = new File(path1); //write new sheet and call it export.xls = out file
                      // one workbook with multiple sheets
            writableWorkbook = Workbook.createWorkbook(export); //writing out to a writable workbook object, pass out file into wkbk
                                                                              

                        
wf = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD,false); 
cf = new WritableCellFormat(wf);
cf.setWrap(true);

String[] regions = {"NORTH AMERICA", "EUROPE", "LATIN AMERICA", "INDIA", "CHINA","ASIA","MEA"}; //need to iterate thru each region for output
String[] labels = {"Train ID","Gas Turbine ID","Generator ID","Steam Turbine ID","Boiler ID","Environmental ID","Train Name","Plant Type","Unit Type","Block ID","Plant Name","OEM"}; //col headers for output sheets
  
Sheet[] sheet = {sheet1,sheet2,sheet3,sheet4,sheet5,sheet6, sheet7};  //in order to do array for these objects they must first be declared above


System.out.println("Reading data from each Region");


  // first loop is to create n sheets and then second inner loop is to add column headers to each sheet...first loop do 7 times, one pass for each region
for (int j=0; j<regions.length; j++){


	region =regions[j];  // get as many regions as are in original array
	writableSheet = writableWorkbook.createSheet(region, j); // create n sheets based on above
	
	
     //this inner loop is only for column headings on each sheet and nothing else, 12 headings in labels array	
   for (int i=0; i<labels.length; i++) //do 12 times
     {
	String headings =labels[i]; // get string value of each column element
	    	    	
	Label heading=new Label(i,0,headings,cf);  //create label object, pass string for argument 3 which requires a string
	     
	writableSheet.setColumnView(i,20);   //sets each column at width = 20, note: cannot have some columns as diff val unless we use logical if
	writableSheet.addCell(heading); // pass labels into each sheet for x number of items in its string array
		
    } //end 1st inner loop

                             // sqlite data source assumes col 1 is a region name, iterate thru all regions in one source file
        	
                                 ps=cn2.prepareStatement("select * from book3 where region=?"); //each pass considers what region the record is in
                                 ps.setString(1,region);  //working on current region from regions array
								 
			ResultSet rs = ps.executeQuery();

              
			 while (rs.next()) {

				 unit_id =rs.getString("unit_id");
                                 equip_id =rs.getString("equip_id");
                                 unit_name=rs.getString("unit_name");
                                 plant_type=rs.getString("plant_type");
                                 unit_type=rs.getString("unit_type");
                                 block_id=rs.getString("block_id");
                                 plant_name=rs.getString("plant_name");
                                 equip_type=rs.getString("equip_type");
                                 
                                
				 // rowcount=rs.getRow(); //gets for each loop, starts at 1 for each loop

                                  counter=counter+1; //or counter++

                                                         
                                   if(counter==1){  //ok to use == for int but not string-set counter_n to 1 for this
                                        //counter will only be 1 once so it grabs 1st uni value
                                                                              
                                        place(); //put current val of unit id in holding area outside loops and call it old_val

                                           }

                                              //on next pass and subsequent passes counter will not = 1
                                       //if(data6==old_val){ //must use .=
                                        if(unit_id.equals(old_val)){
                                        System.out.println("same val");                                                              
                                        conditional(); //then for current unit id go get equip types in donditional method

                                          }

                                     else {

                           System.out.println("new val");  //we have a new line because current val of unit id is not = to old_val
                                              place();              //put new value of data6 in storage place
                                              count_n=count_n+1;  //go to next line on output because we have a new unit
                                              conditional();          //run conditional again for equip types 
                                          }
                            



                 // System.out.println(rowcount); //restarts at 0 for each region
                 

System.out.println(counter);		//prints 188 records, does not act like rowcount, this considers all records in source


	 						 
			 } //end rs

  

   count_n=0; // originally is set to 1 for first pass but on subsequent passes set to 0 because when we have a new unit it does plus 1 there

} // end outer loop





   System.out.println("Implementing programmed logic");
   System.out.println("Rendering out to Excel sheet for user reference");
  

writableWorkbook.write();  //write command here so it grabs all iterations, must have close as next line
writableWorkbook.close();


     // call desktop object to enable rendering out to excel

desktop = Desktop.getDesktop();
      File file2 = new File("C:/glassfish3/jdk/bin/Export.xls");
      desktop.open(file2);  //display output file 



} //end of try block


catch (Exception e) {
   new Exception("Exception in SQL", e);
}  


	} // end of init components method




       //storage area for val of unit id, so we can compare current val to old val on each pass

public void place() {

old_val=unit_id;

} 

           
     void conditional() {
                     //will write to whichever writable sheet we are on based on outer 4 loop that determines which sheet we are on at the moment

try{
            
                   if(equip_type.equals("Generator")){
                       
                       Label label = new Label(2, count_n, equip_id); //puts sy # at col 1
                       writableSheet.addCell(label);
                       Label label4 = new Label(0, count_n, unit_id); //puts uni no in col 0
                       writableSheet.addCell(label4);
              Label label10 = new Label(10, count_n, plant_name); //puts plant name in col 6
                       writableSheet.addCell(label10);
                       Label label11 = new Label(7, count_n, plant_type); //puts plant type in col 7
                       writableSheet.addCell(label11);
              Label label12 = new Label(8, count_n, unit_type); //puts unit type name in col 8
                       writableSheet.addCell(label12);
                       Label label13 = new Label(9, count_n, block_id); //puts block id in col 9
                       writableSheet.addCell(label13);
              Label label14 = new Label(6, count_n, unit_name); //puts block id in col 10
                       writableSheet.addCell(label14);
              Label label15 = new Label(11, count_n, oem); //puts oem in col 11
                       writableSheet.addCell(label15);

                           }

                    else if (equip_type.equals("Steam Turbine")){                          
                          
                     Label label = new Label(3, count_n, equip_id); //puts sy # at col 2
                      Label label4 = new Label(0, count_n, unit_id); //puts uni no in col 0
                      writableSheet.addCell(label4);
                      writableSheet.addCell(label);
              Label label10 = new Label(10, count_n, plant_name); //puts plant name in col 6
                       writableSheet.addCell(label10);
                       Label label11 = new Label(7, count_n, plant_type); //puts plant type in col 7
                       writableSheet.addCell(label11);
              Label label12 = new Label(8, count_n, unit_type); //puts unit type name in col 8
                       writableSheet.addCell(label12);
                       Label label13 = new Label(9, count_n, block_id); //puts block id in col 9
                       writableSheet.addCell(label13);
              Label label14 = new Label(6, count_n, unit_name); //puts block id in col 10
                       writableSheet.addCell(label14);
              Label label15 = new Label(11, count_n, oem); //puts oem in col 11
                       writableSheet.addCell(label15);


                           }     

                     else if (equip_type.equals("Boiler")){
                          
                      Label label3 = new Label(4, count_n, equip_id); //puts sy # at col 3
                      Label label4 = new Label(0, count_n, unit_id); //puts uni no in col 0
                      writableSheet.addCell(label4);
                      writableSheet.addCell(label3);
              Label label10 = new Label(10, count_n, plant_name); //puts plant name in col 6
                       writableSheet.addCell(label10);
                       Label label11 = new Label(7, count_n, plant_type); //puts plant type in col 7
                       writableSheet.addCell(label11);
              Label label12 = new Label(8, count_n, unit_type); //puts unit type name in col 8
                       writableSheet.addCell(label12);
                       Label label13 = new Label(9, count_n, block_id); //puts block id in col 9
                       writableSheet.addCell(label13);
              Label label14 = new Label(6, count_n, unit_name); //puts block id in col 10
                       writableSheet.addCell(label14);
              Label label15 = new Label(11, count_n, oem); //puts oem in col 11
                       writableSheet.addCell(label15);
                      
                             }

                     else if (equip_type.equals("Environmental")){
                          
                      Label label3 = new Label(5, count_n, equip_id); //puts sy # at col 4
                      Label label4 = new Label(0, count_n, unit_id); //puts uni no in col 0
                      writableSheet.addCell(label4);
                      writableSheet.addCell(label3);
              Label label10 = new Label(10, count_n, plant_name); //puts plant name in col 6
                       writableSheet.addCell(label10);
                       Label label11 = new Label(7, count_n, plant_type); //puts plant type in col 7
                       writableSheet.addCell(label11);
              Label label12 = new Label(8, count_n, unit_type); //puts unit type name in col 8
                       writableSheet.addCell(label12);
                       Label label13 = new Label(9, count_n, block_id); //puts block id in col 9
                       writableSheet.addCell(label13);
              Label label14 = new Label(6, count_n, unit_name); //puts block id in col 10
                       writableSheet.addCell(label14);
              Label label15 = new Label(11, count_n, oem); //puts oem in col 11
                       writableSheet.addCell(label15);
                      
                             }

                     else if (equip_type.equals("Gas Turbine")){
                         
                      Label label3 = new Label(1, count_n, equip_id); //puts sy # at col 5
                      Label label4 = new Label(0, count_n, unit_id); //puts uni no in col 0
                      writableSheet.addCell(label4);
                      writableSheet.addCell(label3);
              Label label10 = new Label(10, count_n, plant_name); //puts plant name in col 6
                       writableSheet.addCell(label10);
                       Label label11 = new Label(7, count_n, plant_type); //puts plant type in col 7
                       writableSheet.addCell(label11);
              Label label12 = new Label(8, count_n, unit_type); //puts unit type name in col 8
                       writableSheet.addCell(label12);
                       Label label13 = new Label(9, count_n, block_id); //puts block id in col 9
                       writableSheet.addCell(label13);
              Label label14 = new Label(6, count_n, unit_name); //puts block id in col 10
                       writableSheet.addCell(label14);
              Label label15 = new Label(11, count_n, oem); //puts oem in col 11
                       writableSheet.addCell(label15);
                      
                             }

            
} //end of try block


catch (Exception e) {
   new Exception("Exception in SQL", e);
}  


} //end conditional method




//this method is run from test app servlet but when plain java class use just standard main method
//public void run2() {
   
	public static void run2() throws IOException {
	//public static void main(String[] args) throws IOException {


		Train_Configurator ManageRecords = new Train_Configurator(); 

                 
		ManageRecords.loadDriver();
                ManageRecords.initComponents();
		
             
		
	}  //end of main method




}  //end of class
	






