package routines;

import java.io.IOException;
import java.io.Writer;
import java.sql.Date;

import routines.system.DBMSConstants;
import routines.system.Dynamic;
import routines.system.DynamicMetadata;
import routines.system.FormatterUtils;

public class GEDynamicRoutine_masking {

    /**
     * returnDataAsString: return the Dynamic Data as a String with the expected Delimiter
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("world") input: The string need to be printed.
     * {example} helloExemple("world") # hello world !.
     */
    public static String returnDataAsString_old(Dynamic data, String delimiter) {
    	
    	StringBuilder sb = new StringBuilder();
		if (data != null) {
			try {
				routines.system.DynamicUtils
						.writeValuesToStringBuilder(data,
								sb,
								delimiter);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return sb.toString().replace("\\","\\\\").replaceAll("\\\n", "").replaceAll("null","").replaceAll("\\u0000","").replaceAll("\\x00", "").replaceAll("\\\r",""); 
    }
    
    /**
     * returnDataAsString: return the Dynamic Data as a String with the expected Delimiter
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("world") input: The string need to be printed.
     * {example} helloExemple("world") # hello world !.
     */
    public static String maskString(String inputStr, int param1, int param2) {
        StringBuilder sb = new StringBuilder();
        for(int i=0 ; i<inputStr.length() ; i++ ) {
          if(i%param1 == 0 || i%param2 == 0) {
          sb.append("#");
           } else {
              sb.append(inputStr.charAt(i));
           }
        }
        return sb.toString();
        }
    
    public static String returnDataAsString(Dynamic column, String delimiter) throws IOException {
    	 return returnDataAsString(column, delimiter, false);
    	}

    	public static String returnDataAsString(Dynamic column, String delimiter, boolean masking) throws IOException {

    	      StringBuilder sb = new StringBuilder();
    	      if (column != null) {
    	        for (int i = 0; i < column.getColumnCount(); i++) {
    	       DynamicMetadata metadata = column.getColumnMetadata(i);
    	       if ("id_Date".equals(metadata.getType()) ) {
    	        sb.append(FormatterUtils.format_Date((java.util.Date) column.getColumnValue(i),"MM-dd-YYYY"));
    	       } else {
    	         if(masking && "id_String".equals(metadata.getType()) ){
    	           sb.append(maskString(String.valueOf(column.getColumnValue(i)), 3, 5 ));
    	           //System.out.println("Metadata type:"+ metadata.getType());
    	         } else {
    	           sb.append(String.valueOf(column.getColumnValue(i)));
    	         }
    	       }
    	       if (i != (column.getColumnCount() - 1)) 
    	        sb.append(delimiter);
    	        }
    	        return sb.toString().replace("\\","\\\\").replaceAll("\\\n", "").replaceAll("null","").replaceAll("\\u0000","").replaceAll("\\x00", "").replaceAll("\\\r","");        
    	      }
    	      else 
    	       return null;
    	  }
}
