package routines;

import java.util.Collections;
import java.util.Arrays;
import java.util.List;
/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class TransformMetadata {
	public static final List<String> RESERVED_WORDS =
		Collections.unmodifiableList(Arrays.asList(
				"ACCESS","ADD","ALL","ALTER","AND","ANY","AS","ASC","AUDIT","BETWEEN","BY","CHAR","CHARACTER","CHECK","CLUSTER","COLUMN","COLUMN_VALUE",
				"COMMENT","COMPRESS","CONNECT","CONSTRAINT","CONSTRAINTS","CONTINUE","COUNT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_USER",
				"DATE","DECIMAL","DEFAULT","DEFERRABLE","DEGREE","DELETE","DESC","DESCRIBE","DISTINCT","DISTRIBUTED","DOMAIN","DOUBLE","DROP","ELSE", 
				"END","ESCAPE","EXCEPT","EXCEPTION","EXCLUDE","EXCLUSIVE","EXISTS","EXTERNAL","EXTRACT","FALSE","FETCH","FILE","FILTER","FIRST","FLOAT",
				"FOR","FORCE","FREEZE","FROM","GRANT","GROUP","HAVING","IDENTIFIED","IMMEDIATE","IN","INCREMENT","INDEX","INITIAL","INSERT","INTEGER", 
				"INTERSECT","INTO","IS","LEVEL","LIKE","LIMIT","LOCK","LONG","MAXEXTENTS","MINUS","MLSLABEL","MODE","MODIFY","NESTED_TABLE_ID","NEW",
				"NOAUDIT","NOCOMPRESS","NOT","NOWAIT","NULL","NUMBER","OF","OFFLINE","OFFSET","ON","ONLINE","OPTION","OR","ORDER","PARTITION","PCTFREE",
				"PRIOR","PUBLIC","RANGE","RAW","RENAME","RESOURCE","REVOKE","ROW","ROWID","ROWNUM","ROWS","SELECT","SESSION","SET","SHARE","SIZE","SMALLINT",
				"START","SUCCESSFUL","SYNONYM","SYSDATE","TABLE","THEN","TO","TRIGGER","UID","UNION","UNIQUE","UPDATE","USER","VALIDATE","VALUES","VARCHAR",
				"VARCHAR2","VIEW","WHENEVER","WHERE","WITH"
			));
	
    public static String flattenTableName(String tableName) { //rename to quoteTableNames
    	        if(tableName.contains("(") || tableName.contains(")") || tableName.contains("*") ||
    	        Character.isDigit(tableName.charAt(0)) || RESERVED_WORDS.contains(tableName.toUpperCase())
    	        || tableName.contains("#") || tableName.contains("@") || tableName.contains("$")
    	        || tableName.contains("/") )
    	            return "\"" + tableName.toLowerCase() + "\"";
    	        else return tableName.toLowerCase();
    }
    
    public static String removePrefix(String name, String prefix) {
		if (prefix != null && prefix.isEmpty() !=true && name.matches("^"+prefix+"_.*")){
			name = name.replaceFirst("^"+prefix+"_","");
    	}
		return name;
    }
    public static String quoteIfInvalidName(String name, String quoteChar) {
    	if (name.matches("[^0-9][a-zA-Z0-9_]*") && (RESERVED_WORDS.contains(name.toUpperCase()) == false)){
    		//System.out.println(name);
    		return name;
    		}
    	else{
    		System.out.println("quoted:" + name);
    		return "\"" + name + "\"";
    	}
    }
}
