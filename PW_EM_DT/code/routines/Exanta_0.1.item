package routines;

import java.util.HashSet;
import java.util.Set;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 1
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Exanta{
	private final static Set<String> HGP_COMPONENTS = new HashSet<String>(){
																			{add("S1B");
																			 add("S2B");
																			 add("S3B");
																			 add("S1N");
																			 add("S2N");
																			 add("S3N");
																			 add("S1S");
																			 add("S2S");
																			 add("S3S");}};
	private final static Set<String> CI_COMPONENTS = new HashSet<String>(){
																			{add("Cap");
																			 add("Liner");
																			 add("TP");
																			 add("FN");
																			 add("FNA");}};
	
    /**
     * isWithinHardwareLimit: return boolean.
     * 
     * 
     * {talendTypes} float, float, float, float, float, float, float
     * 
     * {Category} User Defined
     * 
     * {example} isWithinHardwareLimit(0.0,0.0,0.0,0.0,0.0,0.0,0.0) true.
     * 
     */
    public static boolean isWithinHardwareLimit(float currActualAccumulatedHrs, float thisActualAccumulatedHrs, float primaryFuelPctHrsOrStarts, float primaryHrsOrStartsMF, float secondaryFuelPctHrsOrStarts, float secondaryHrsOrStartsMF, float hrsOrStartsLimit) {
    	boolean is = false;
    	
    	float primary = (currActualAccumulatedHrs - thisActualAccumulatedHrs)*primaryFuelPctHrsOrStarts*primaryHrsOrStartsMF*0.01f;
    	float secondary = (currActualAccumulatedHrs - thisActualAccumulatedHrs)*secondaryFuelPctHrsOrStarts*secondaryHrsOrStartsMF*0.01f;
    	
     	is = (primary + secondary) < (0.75f*hrsOrStartsLimit);
    	return is;
    	
    }
    
    /**
     * getComponentType: return String.
     * 
     * 
     * {talendTypes} String, String
     * 
     * {Category} User Defined
     * 
     * {example} getComponentType("S1B") HGP.
     * 
     */
    public static String getComponentType(String component) {
    	
    	if(CI_COMPONENTS.contains(component)){
    		return "CI";
    	}else if(HGP_COMPONENTS.contains(component)){
    		return "HGP";
    	}else{
    		return null;
    	}
    }
 }