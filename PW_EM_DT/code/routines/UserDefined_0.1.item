package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class UserDefined {

    /**
     * Example: return true if input string is numeric
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("123") input: The string need to be printed.
     * 
     * {example} isNumeric("123").
     */
	public static Boolean isNumeric(String str) {
    	if(str.equals("")){
    		return false;
    	}
    	for(int i=str.length();--i>=0;){ 
    		int chr=str.charAt(i); 
    		if((chr<48&&chr!=45)|| chr>57) 
    		return false;
    		} 
    		return true;
    }


    /**
     * Example: return Ltrim of input string using Trim character.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("123","1") input: The string need to be printed.
     * 
     * {example} Ltrim("123","1").
     */

public static String Ltrim(String text, String trimBy) {
    int beginIndex = 0;
    int endIndex = text.length();

    while (text.substring(beginIndex, endIndex).startsWith(trimBy)) {
        beginIndex += trimBy.length();
    } 

    while (text.substring(beginIndex, endIndex).endsWith(trimBy)) {
        endIndex -= trimBy.length();
    }

    return text.substring(beginIndex, endIndex);
}
/**
 * Example: return nthIndexOf of input string using Trim character.
 * 
 * 
 * {talendTypes} String
 * 
 * {Category} User Defined
 * 
 * {param} string("123","1") input: The string need to be printed.
 * 
 * {example} nthIndexOf("123/567/12","1").
 */
public static int nthIndexOf(final String string, final String token,
	     final int index)
	  {
	     int j = 0;

	     for (int i = 0; i < index; i++)
	     {
	        j = string.indexOf(token, j + 1);
	        if (j == -1) break;
	     }

	     return j;
	  }
}