package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class GPLoadRoutine {

    /**
     * getGPLoadColumnList: return the Column List in a FORMAT for GPLoad.
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("world") input: The string need to be printed.
     * {example} getGPLoadColumnList("world") # hello world !.
     */
    public static String getGPLoadColumnList(String message1) {
    	String message = "";
    	int escape = 0;
    	for(int i=0; i < message1.length(); i++) {
    		if(message1.charAt(i) == '(') { escape = 1; }
    		if(message1.charAt(i) == ')') { escape = 0; }
    		if(escape == 1 && message1.charAt(i) == ',') {
    			message += ';'; //lets replace the , so numeric(10,15) to be numeric(10;15)
    		} else {
    			message += message1.charAt(i);
    		}
    	}
        //System.out.println(message);
    	String myColumnList = "";
        String [] myColumnArray = message.split(",");
        //System.out.println("Split Successful");
        for(int i=0; i < myColumnArray.length; i++){
        	//System.out.println("Loop: " + i);
        	String col = TalendString.talendTrim(myColumnArray[i], ' ', 0);
        	//System.out.println("Trim Ok");
        	//System.out.println(myColumnList);
        	//System.out.println(col);
        	int secondQuotePosition = col.indexOf("\"", col.indexOf("\""));
        	int characterAfterColName = col.indexOf(' ', secondQuotePosition); //col.indexOf(' ',)
        	String columnName = col.substring(0,characterAfterColName);
        	if(columnName.contains("\"") || columnName.contains(" ")) {
        		columnName = "\"" + columnName.replace("\"", "\\\"").replace(" ", "\\ ") + "\"";
        	}
        	myColumnList += "        - "+columnName+" :"+col.substring(characterAfterColName)+"\n";
        	//System.out.println("Index Of ");
        }
        //lets replace the ; so numeric(10;15) to be numeric(10,15)
        return myColumnList.replace(";",",");
    }
    public static String MSSQL_getGPLoadColumnList(String message1) {
    	String message = "";
    	int escape = 0;
    	for(int i=0; i < message1.length(); i++) {
    		if(message1.charAt(i) == '(') { escape = 1; }
    		if(message1.charAt(i) == ')') { escape = 0; }
    		if(escape == 1 && message1.charAt(i) == ',') {
    			message += ';'; //lets replace the , so numeric(10,15) to be numeric(10;15)
    		} else {
    			message += message1.charAt(i);
    		}
    	}
        //System.out.println(message);
    	String myColumnList = "";
        String [] myColumnArray = message.split(",");
        //System.out.println("Split Successful");
        for(int i=0; i < myColumnArray.length; i++){
        	//System.out.println("Loop: " + i);
        	String col = TalendString.talendTrim(myColumnArray[i], ' ', 0);
        	//System.out.println("Trim Ok");
        	//System.out.println(myColumnList);
        	//System.out.println(col);
        	//String columnName = col.substring(0,col.indexOf(' '));
        	String columnName=col;
        	if(columnName.contains("\"") || columnName.contains(" ")) {
        		columnName = "\"" + columnName.replace("\"", "\\\"").replace(" ", "\\ ")+ "\"";
        		//columnName = "\"" + columnName.replace("\"", "\\\"")+ "\"";
        	}
        	//myColumnList += "        - "+columnName+" :"+col.substring(col.indexOf(' '))+"\n";
        	myColumnList += "        - "+columnName+" :"+"\n";
        	//System.out.println("Index Of ");
        }
        //lets replace the ; so numeric(10;15) to be numeric(10,15)
        return myColumnList.replace(";",",");
    }
}

