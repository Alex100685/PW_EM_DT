package routines;


import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import java.math.BigInteger;
import java.net.URL;
import java.net.URLConnection;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import com.box.sdk.BoxAPIConnection;
import com.box.sdk.BoxAPIException;
import com.box.sdk.BoxCollaboration;
import com.box.sdk.BoxFile;
import com.box.sdk.BoxFolder;
import com.box.sdk.BoxItem;
import com.box.sdk.BoxSharedLink;
import com.box.sdk.BoxWebLink;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.sun.org.apache.bcel.internal.generic.GETSTATIC;

import routines.system.JSONObject;


public class com_ge_datacoe_boxhelper {
	 private static final java.util.Map<String, String> getTokenResponse = new java.util.HashMap<String, String>();
	    
	    public static synchronized String getToken(String clientId, String clientSecret, String SSO) {
	        
	        SimpleDateFormat dateFormatGmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	        dateFormatGmt.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
	        String body="";
	        try {
	            if ( getTokenResponse.containsKey(clientId + "__" + clientSecret + "__" + SSO)) {
	                JSONObject obj = new JSONObject(getTokenResponse.get(clientId + "__" + clientSecret + "__" + SSO));
	                if( dateFormatGmt.parse(obj.get("expires").toString()).after( dateFormatGmt.parse( dateFormatGmt.format(new Date()) ) ) ) {
	                    return obj.get("token").toString();
	                } else {
	                    java.util.Random rand = new java.util.Random(); 
	                    int wait_sec = rand.nextInt(5);
	                    System.out.println("Curr time: " + dateFormatGmt.format(new Date()) + " response: " + getTokenResponse.get(clientId + "__" + clientSecret + "__" + SSO));
	                    System.out.println("Local token expired obtaining a new token from server after: " + wait_sec + "second(s).");
	                    Thread.sleep(wait_sec*1000);
	                }
	            } else {
	                System.out.println("Local cache was empty obtaining a new token from server.");
	            }
	            body = "";

	            URL url = new URL("http://alpcisdappa14c.corporate.ge.com/box/getToken.php" +
	                    "?env=prod" +
	                    "&AkanaClientID=" + clientId +
	                    "&AkanaClientSecret=" + clientSecret +
	                    "&sso=" + SSO);

	            URLConnection con = url.openConnection();
	            InputStream in = con.getInputStream();
	            String encoding = con.getContentEncoding();
	            encoding = encoding == null ? "UTF-8" : encoding;

	            StringBuilder sb = new StringBuilder();
	            BufferedReader br = new BufferedReader(new InputStreamReader(in));

	            String read;
	            while ((read = br.readLine()) != null) {
	                sb.append(read);
	            }

	            br.close();
	            body = sb.toString();
	            //System.err.println(body);
	            if(body.contains("token")) getTokenResponse.put(clientId + "__" + clientSecret + "__" + SSO, body);
	            JSONObject obj = new JSONObject(body);
	            return obj.get("token").toString();
	        } catch (Exception e) {
	        	System.err.println("Response body was: "+body);
	            e.printStackTrace();
	        }
	        return "";
	    }

    public static String getMail(String SSO) {
        String body = "";
        try {

            URL url = new URL("http://alpcisdappa14c.corporate.ge.com/box/gal_lookup.php" +
                    "?sso=" + SSO);
            URLConnection con = url.openConnection();
            InputStream in = con.getInputStream();
            String encoding = con.getContentEncoding();
            encoding = encoding == null ? "UTF-8" : encoding;

            StringBuilder sb = new StringBuilder();
            BufferedReader br = new BufferedReader(new InputStreamReader(in));

            String read;
            while ((read = br.readLine()) != null) {
                //System.out.println(read);
                sb.append(read);
            }

            br.close();
            body = sb.toString();
            JSONObject obj = new JSONObject(body);
            return obj.get("mail").toString();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            System.err.println(body);
            e.printStackTrace();

        }
        return "";
    }

    public static void initProxy() {
    	//System.setProperty("https.proxyHost", "PITC-Zscaler-ASPAC-Singapore3PR.proxy.corporate.ge.com"); 
        System.setProperty("https.proxyHost", "CIS-Cinci-pitc-SSOW.proxy.corporate.gtm.ge.com");
        //System.setProperty("https.proxyHost", "PITC-Zscaler-EMEA-Amsterdam3PR.proxy.corporate.ge.com");
        System.setProperty("https.proxyPort", "80");
    }

    public static void sslCertBypass() {
        javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[]{new javax.net.ssl.X509TrustManager() {
            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                return null;
            }

            public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
            }

            public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
            }
        }};


        // Activate the new trust manager

        javax.net.ssl.SSLContext sc;
        try {
            sc = javax.net.ssl.SSLContext.getInstance("SSL");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

	public static String fixBadNames(String boxObjectName) {
		String forReturn = boxObjectName.replace("\\","_").replace("/","_").replace("\"","_")
		.replace("*","_").replace("?","_").replace("<","_")
		.replace(">","_").replace("|","_").replace("&","_")
		.replaceAll("[^\\x00-\\x7F]", "").trim();
		if(forReturn.matches("^[.| |\\-]*$") ) { return forReturn+"_"; }
		if(forReturn.length()> 255) return forReturn.substring(0,254);
		return forReturn;
	}

	
	public static String fixBadDescriptions(String boxObjectName) {
		String forReturn = boxObjectName.replaceAll("[^\\x00-\\x7F]", "");
//		if(forReturn.matches("^[0-9|.| |\\-]*$") ) { return forReturn+"_"; }
//		if(forReturn.length()> 255) return forReturn.substring(0,254);
		return forReturn;
	}
	
	public static String getFileChecksum(String filename) throws Exception {
        MessageDigest digestInstance = null;
        try {
            digestInstance = MessageDigest.getInstance("SHA1");
        } catch (NoSuchAlgorithmException ae) {
            throw new Exception("Digest algorithm not found", ae);
        }
        InputStream fis = new FileInputStream(new File(filename));
        int n = 0;
        byte[] buffer = new byte[8192];
        while (n != -1) {
            n = fis.read(buffer);
            if (n > 0) {
            	digestInstance.update(buffer, 0, n);
            }
        }
        byte[] digestBytes = digestInstance.digest();
        return base64encode(digestBytes);
	}
	
	static String base64encode(byte[] data) {
        char[] tbl = {
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
            'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
            'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
            'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' };

        StringBuilder buffer = new StringBuilder();
        int pad = 0;
        for (int i = 0; i < data.length; i += 3) {

            int b = ((data[i] & 0xFF) << 16) & 0xFFFFFF;
            if (i + 1 < data.length) {
                b |= (data[i + 1] & 0xFF) << 8;
            } else {
                pad++;
            }
            if (i + 2 < data.length) {
                b |= (data[i + 2] & 0xFF);
            } else {
                pad++;
            }

            for (int j = 0; j < 4 - pad; j++) {
                int c = (b & 0xFC0000) >> 18;
                buffer.append(tbl[c]);
                b <<= 6;
            }
        }
        for (int j = 0; j < pad; j++) {
            buffer.append("=");
        }

        return buffer.toString();
    }
	
	public static void init() {
		initProxy();
		sslCertBypass();
	}
    //******************************Create Folder****************************************************************/
    /**
     * createBoxFolder: return the newly created Box Folder Id
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String boxParentFolderId, String boxFolderName
     * {example} 
     */
    public static String createBoxFolder(String clientId, String clientSecret, String SSO, String boxParentFolderId, String boxFolderName) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        
        System.out.println("**************Creating folder**************************");
        System.out.println("Parent FolderID is: " + boxParentFolderId);
        System.out.println("Folder name is: " + boxFolderName);
        
        while (tryAmount++ < 5) {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                //This is a folder where we want to create the project folders
                BoxFolder folder = new BoxFolder(api, boxParentFolderId);

                BoxFolder.Info folderInfo = folder.createFolder(com_ge_datacoe_boxhelper.fixBadNames(boxFolderName));
                return folderInfo.getID();
            } catch (BoxAPIException a) {

                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                if(a.getResponse() != null) {
                	resJSON = (JsonObject) parser.parse(a.getResponse());

                	if (resJSON.get("code").getAsString().equals("item_name_in_use")) {
                		return resJSON.get("context_info").getAsJsonObject()
                            .get("conflicts").getAsJsonArray()
                            .get(0).getAsJsonObject()
                            .get("id").getAsString();
                	}
                }
                e = a;
                System.err.println("Response: " + a.getResponse());
                Thread.sleep(2000);
                
            }
        }
        System.out.println("************************************************************");
        throw e;
    }
    //******************************Update Folder Description****************************************************************/
    /**
     * updateBoxFolderDescription: sets the folder description of a given folder Id
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String folderId, String boxFolderDescription
     * {example} 
     */
    public static void updateBoxFolderDescription(String clientId, String clientSecret, String SSO, String folderId, String folderDescription) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        
        while (tryAmount++ < 5) {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                //This is a folder where we want to update the description
                BoxFolder folder = new BoxFolder(api, folderId);

                BoxFolder.Info folderInfo = folder.getInfo();
                folderInfo.setDescription(folderDescription.replaceAll("[^\\x00-\\x7F]", "").trim());
                folder.updateInfo(folderInfo);
                return;
            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                resJSON = (JsonObject) parser.parse(a.getResponse());
                System.out.println(a.getResponse());
                //return a.getResponse();
                e = a;
                Thread.sleep(2000);
            }
        }
        throw e;
    }
    //****************************Create File or upload new version****************************************************/
    /**
     * createBoxFile: creates / uploads / overwrites a given file
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String folderId, String fileName, String fileLocation
     * {example} 
     */
    public static String createBoxFile (String clientId, String clientSecret, String SSO, String folderId, String fileName, String fileLocation) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        
        boolean fileExist = false;
        String fileId = "";
        
        int tryAmount = 0;
        int maxTry = 5;
        
        while (tryAmount++ < maxTry) {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                //Do the copy
                FileInputStream fis = null;
                File uncompressed_file = new File(fileLocation);
                long fileSize = uncompressed_file.length();
                fis = new FileInputStream(uncompressed_file);
                
                //if file size is big, then increase retries because it often gets no response from BOX
                if (fileSize/1024.00/1024.00 > 200.00) {
                	maxTry = 10;
                }
                
                
                System.out.println("******************Uploading file*****************************");
                System.out.println("File Name: " + fileName);
                System.out.println("Parent Folder Id: " + folderId);
                System.out.println("File Source location: " + fileLocation);
                System.out.println("File size is :" + String.format("%.2f", fileSize/1024.00/1024.00) + "MB");
               
                
                
                if(fileExist==false) {
                    //This is the folder
                    BoxFolder folder = new BoxFolder(api, folderId);
                    BoxFile.Info uploadInfo; 
                    if( /*true ||*/ fileSize < 2147483647 ){ /*2GB*/
                    	System.out.println("Trying to upload as small file...");
                    	uploadInfo = folder.uploadFile(fis, com_ge_datacoe_boxhelper.fixBadNames(fileName));
                    } else {
                    	System.out.println("Trying to upload as large file. File size: " + fileSize );
                    	uploadInfo = folder.uploadFile(fis, com_ge_datacoe_boxhelper.fixBadNames(fileName));
                    	//uploadInfo = folder.uploadLargeFile(fis, com_ge_datacoe_boxhelper.fixBadNames(fileName), uncompressed_file.length());
                    }
                    System.out.println(uploadInfo.getID() + " uploaded as whole new!! " + String.format("%.2f", fileSize/1024.00/1024.00) + "MB. Version 1");
                    return uploadInfo.getID();
                } else {
                    BoxFile file = new BoxFile(api, fileId);
                    File localFile = new File(fileLocation);
                    //String sha1 = new String( createSha1 (localFile) );
                    String sha1 =  toHex( createSha1 (localFile) );
                    //String sha1 = String.format("%1$02x", createSha1 (localFile));
                    if(sha1.equals(file.getInfo().getSha1()) ) {
                    	System.out.println("File existed. SHA1 matched!! Sha1:" + sha1);
                    	return fileId;
                    } else {
                    	System.out.println("File existed. SHA1 didn't match!! Our Sha1: " + sha1 + " Remote Sha1: " + file.getInfo().getSha1());
                        if( /*true ||*/ fileSize < 2147483647 ){ /*2GB*/
                        	System.out.println("File exists. Trying to upload new version...");
                        	file.uploadVersion(fis);
                        } else {
                        	System.out.println("File exists. It's a large file. File size: " + fileSize +" Trying to upload new version...");
                        	file.uploadLargeFile(fis, uncompressed_file.length());
                        }
                    	System.out.println("File existed. Upload finished as new version!! " + String.format("%.2f", fileSize/1024.00/1024.00) + "MB");
                    	return fileId;
                    }
                }

            } catch (BoxAPIException a) {
                if(a.getResponse() != null ) {
                	JsonParser parser = new JsonParser();
                    JsonObject resJSON = new JsonObject();
                	resJSON = (JsonObject) parser.parse(a.getResponse());
                	if (resJSON.get("code").getAsString().equals("item_name_in_use")) {
                		
                		fileId = resJSON.get("context_info").getAsJsonObject()
                            	.get("conflicts").getAsJsonObject()
                            	.get("id").getAsString();
                		fileExist = true;
                	} else {
                		System.out.println(a.getResponse());
                		e = a;
                		Thread.sleep(2000);
                	}
                } else {
                	System.out.println("No API Exception response, retrying..");
                	e = a;
            		Thread.sleep(2000);
                }
            }
        }
        System.out.println("************************************************************");
        throw e;
    }
    
    
  //****************************Create File or upload new version****************************************************/
    /**
     * createBoxFile: creates / uploads / overwrites a given file
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String folderId, String fileName, String fileLocation
     * {example} 
     */
    public static String createBoxFile (String clientId, String clientSecret, String SSO, String folderId, String fileName, byte[] content) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        
        boolean fileExist = false;
        String fileId = "";
        
        int tryAmount = 0;
        ByteArrayInputStream bis = null;
        
        while (tryAmount++ < 5) {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                bis = new ByteArrayInputStream(content);
                
                System.out.println("******************Uploading file*****************************");
                System.out.println("File Name: " + fileName);
                System.out.println("Parent Folder Id: " + folderId);

                if(fileExist==false) {
                    //This is the folder
                    BoxFolder folder = new BoxFolder(api, folderId);
                    BoxFile.Info uploadInfo; 

                    uploadInfo = folder.uploadFile(bis, com_ge_datacoe_boxhelper.fixBadNames(fileName));

                    System.out.println(uploadInfo.getID() + " uploaded as whole new!! Version 1");
                    bis.close();
                    return uploadInfo.getID();
                } else {
                    BoxFile file = new BoxFile(api, fileId);
                   	System.out.println("File exists. Trying to upload new version...");
                   	file.uploadVersion(bis);
                   	bis.close();
                   	return fileId;
                }

            } catch (BoxAPIException a) {
                if(a.getResponse() != null ) {
                	JsonParser parser = new JsonParser();
                    JsonObject resJSON = new JsonObject();
                	resJSON = (JsonObject) parser.parse(a.getResponse());
                	if (resJSON.get("code").getAsString().equals("item_name_in_use")) {
                		
                		fileId = resJSON.get("context_info").getAsJsonObject()
                            	.get("conflicts").getAsJsonObject()
                            	.get("id").getAsString();
                		fileExist = true;
                	} else {
                		System.out.println(a.getResponse());
                		e = a;
                		Thread.sleep(2000);
                	}
                } else {
                	System.out.println("No API Exception response, retrying..");
                	e = a;
            		Thread.sleep(2000);
                }
            }
        }
        System.out.println("**************************************************************");
        if(bis != null) {
        	bis.close();
        }
        throw e;
    }
    
    
    
    //****************************Download box file by name***************************************************/
    /**
     * downloadBoxFileByName: searches for a file in the given folder by name then downloads it.
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String folderId, String fileName, String targetFolder
     * {example} 
     */
    public static void downloadBoxFileByName (String clientId, String clientSecret, String SSO, String folderId, String fileName, String targetFolder) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        
        List<String> fileList = new ArrayList<String>();
        
        int tryAmount = 0;
        while (tryAmount++ < 5) {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                //get fileId in the folder 
                BoxFolder folder = new BoxFolder(api, folderId);
                
                for (BoxItem.Info itemInfo : folder) {
                    if (itemInfo instanceof BoxFile.Info) {
                        //BoxFile.Info fileInfo = (BoxFile.Info) itemInfo;
                        if(itemInfo.getName().contains(fileName)) {
                        	System.out.println("Item found:" + itemInfo.getName());
                        	fileList.add(itemInfo.getID());
                        }
                    } 
                }
                
                
                if (fileList.isEmpty()) {
                	System.out.println("No file with pattern " + fileName + " found in BOX.");
                } else {                                
                	//download File
                	for (String currentFile : fileList) {
                	BoxFile file = new BoxFile(api, currentFile);
                	BoxFile.Info info = file.getInfo();

                	FileOutputStream stream = new FileOutputStream(new File ( targetFolder +"/" + info.getName() ) );
                	file.download(stream);
                	stream.close();
                	System.out.println("Downloading " + info.getName() + "...");
                	}
                }
                             
                return;
            } catch (BoxAPIException a) {
                if(a.getResponse() != null ) {
                	System.err.println("Error when download file: " + fileName + " message: " + a.getResponse());
                	a.printStackTrace();
                }
                e = a;
            	Thread.sleep(2000);
            }
        }
        throw e;
    }
    
    
    
    //****************************Get BOX Folder ID by Name***************************************************/
    /**
     * getBoxFolderByName: searches for a folder by name then returns the ids
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String folderId, String fileName, String targetFolder
     * {example} 
     */
    public static List<String> getBoxFolderByName (String clientId, String clientSecret, String SSO, String parentFolderId, String folderName, int level) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        
        
        int tryAmount = 0;
        while (tryAmount++ < 5) {
            List<String> folderList = new ArrayList<String>();
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                //get folderId in the parentFolder 
                BoxFolder folder = new BoxFolder(api, parentFolderId);

                for (BoxItem.Info itemInfo : folder) {
                	   	if (itemInfo instanceof BoxFolder.Info ) {
                	   		if(itemInfo.getName().contains(folderName)) {
                	   			System.out.println("Item found:" + itemInfo.getName());
                	   			BoxFolder.Info folderInfo = (BoxFolder.Info) itemInfo;
                	   			folderList.add(itemInfo.getID());
                	   			if(level != 0) {
                	   				//To understand recursion you must understand recursion first :)
                	   				folderList.addAll(getBoxFolderByName(clientId, clientSecret, SSO, folderInfo.getID(), folderName, level-1));
                	   			}
                	   		}                     		
                    	}
                }
                
   
               
/*                if (myList.isEmpty()) {
                	System.out.println("No folder (" + folderName + ") found in the BOX.");
                	return null;
                } else {*/                                
                	return folderList;
//                }
            } catch (BoxAPIException a) {
                if(a.getResponse() != null ) {
                	System.err.println("Error when searching folder: " + folderName + " message: " + a.getResponse());
                	a.printStackTrace();
                }
                e = a;
            	Thread.sleep(2000);
            }
        }
        throw e;
    }
    
    
    
    
    
    //***********************************File Description upload***********************************************************/
    /**
     * updateBoxFileDescription: sets the file description
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String fileId, String fileDescription
     * {example} 
     */
    public static String updateBoxFileDescription(String clientId, String clientSecret, String SSO, String fileId, String fileDescription) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        
        while (tryAmount++ < 5)
        {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
                //Define input and destination files
              
                
                //Define description
                BoxFile file = new BoxFile(api, fileId);
                
                //Do the Description change
                BoxFile.Info fileInfo = file.getInfo();
                fileInfo.setDescription(fileDescription.replaceAll("[^\\x00-\\x7F]", "").trim());
                file.updateInfo(fileInfo);
                
                return fileId;

            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                resJSON = (JsonObject) parser.parse(a.getResponse());
                System.out.println(a.getResponse());
                //return a.getResponse();
                e = a;
                Thread.sleep(2000);
            }
        }
        throw e;
    }
    
    
    //***********************************Get File share link external (long, expiring)***********************************************************/
    /**
     * getBoxFileSharedLinkExternal: creates an external (public) share
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String fileId
     * {example} 
     */
    public static URL getBoxFileSharedLinkExternal(String clientId, String clientSecret, String SSO, String fileId) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        while (tryAmount++ < 5)
        {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
                //Define description
                BoxFile file = new BoxFile(api, fileId);
                
                return file.getDownloadURL();

            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                resJSON = (JsonObject) parser.parse(a.getResponse());
                System.out.println(a.getResponse());
                //return a.getResponse();
                e = a;
                Thread.sleep(2000);
            }
        }
        throw e;
    }
    
       
    //***********************************Get File share link***********************************************************/
    /**
     * getBoxFileSharedLink: creates an internal clickable url based on the file id
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String fileId
     * {example} 
     */
    public static String getBoxFileSharedLink(String clientId, String clientSecret, String SSO, String fileId) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        while (tryAmount++ < 5)
        {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
                //Define description
                BoxFile file = new BoxFile(api, fileId);
                BoxFile.Info info = file.getInfo();
                String parentId = info.getParent().getID();
                
                
                String readableUrl = "https://ge.app.box.com/files/0/f/"+parentId+"/1/f_"+fileId;
                
                return readableUrl;

            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                resJSON = (JsonObject) parser.parse(a.getResponse());
                System.out.println(a.getResponse());
                //return a.getResponse();
                e = a;
                Thread.sleep(2000);
            }
        }
        throw e;
    }
    
    
    //***********************************Get Folder share link***********************************************************/
    /**
     * getBoxFolderSharedLink: creates an internal clickable url based on the folder ID, the userSSO needs to be the user who wants to use the folder, he will be given editor rights
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String fileId
     * {example} 
     */
    public static String getBoxFolderSharedLink(String clientId, String clientSecret, String SSO, String folderId, String userSSO) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        String readableUrl = "";
        
        while (tryAmount++ < 5)
        {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
            

                
                //Define description
                BoxFolder folder = new BoxFolder(api, folderId);
                BoxFolder.Info info = folder.getInfo();
                //String folderId = info.getParent().getID();
                String folderName = info.getName();
                readableUrl = "https://ge.ent.box.com/files/0/f/"+folderId+ "/"+ folderName;                
                
                //share folder
                //Collection<BoxCollaboration.Info> collaborations = folder.getCollaborations();

                folder.collaborate(com_ge_datacoe_boxhelper.getMail(userSSO), BoxCollaboration.Role.EDITOR);
                
                return readableUrl;

            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                resJSON = (JsonObject) parser.parse(a.getResponse());
                if (resJSON.get("code").getAsString().equals("user_already_collaborator")) {
                	return readableUrl;
                	
                } else {
                    e = a;
                    Thread.sleep(2000);
                }
            }
        }
        throw e;
    }
    
    
    
    //******************************Delete a Folder****************************************************************/
    /**
     * deleteBoxFolder: deletes the current folder, if the last parameter is true then all the subfolders as well
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String folderId, Boolean recursive
     * {example} 
     */
    public static void deleteBoxFolder(String clientId, String clientSecret, String SSO, String folderId, Boolean recursive) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        while (tryAmount++ < 5) {
            try {
                //create a connection 
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                //This is a folder where we want to update the description
                BoxFolder folder = new BoxFolder(api, folderId);

                folder.delete(recursive);

                return;
            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                resJSON = (JsonObject) parser.parse(a.getResponse());
                if (resJSON.get("code").getAsString().equals("folder_not_empty")) {                
                	throw new Exception ("Non-recursive delete selected but the folder is not empty");
                } else {
                    e = a;
                    Thread.sleep(2000);
                }
            }
        }
        throw e;
    }
    
    
  
    //***********************************Delete a file***********************************************************/
    /**
     * deleteBoxFile: deletes the file
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String fileId
     * {example} 
     */
    public static String deleteBoxFile(String clientId, String clientSecret, String SSO, String fileId) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        int tryAmount = 0;
        while (tryAmount++ < 5)
        {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
                //Define description
                BoxFile file = new BoxFile(api, fileId);
                file.delete();
        
                return fileId;

            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                resJSON = (JsonObject) parser.parse(a.getResponse());
                System.out.println(a.getResponse());
                //return a.getResponse();
                e = a;
                Thread.sleep(2000);
            }
        }
        throw e;
    }
    
    
    //**********************************Get folder and file info within a specific folder***********************************************************/
    /**
     * listBox: lists all the objects in a given folder
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String fileId
     * {example} 
     */
    public static List<BoxItem.Info> listBox(String clientId, String clientSecret, String SSO, String parentFolderId, String objectType, Boolean includeSubDirectories) throws Exception {
    	return listBox(clientId, clientSecret, SSO, parentFolderId, objectType, includeSubDirectories, 0,2);
    }
    /**
     * listBox: lists all the objects in a given folder
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String fileId
     * {example} 
     */
    public static List<BoxItem.Info> listBox(String clientId, String clientSecret, String SSO, String parentFolderId, String objectType, Boolean includeSubDirectories, int currLevel, int maxLevel) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        
        currLevel++;
        
        objectType = objectType.toUpperCase();
        if(objectType.equals("FOLDERS")){
        	objectType = "DIRECTORIES";
        }
        if(!objectType.equals("FILES") && !objectType.equals("DIRECTORIES") && !objectType.equals("BOTH") ) {
        	throw new Exception("objectType must be one of the following: FILES / DIRECTORIES / BOTH");
        }
        
        int tryAmount = 0;
        while (tryAmount++ < 5)
        {
            List<BoxItem.Info> myList = new ArrayList<BoxItem.Info>();
            //myList.get(0).get
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
                //Define description
                
                BoxFolder folder = new BoxFolder(api, parentFolderId);
                for (BoxItem.Info itemInfo : folder) {
                	   	if (itemInfo instanceof BoxFile.Info && (objectType.equals("FILES") || objectType.equals("BOTH") ) ) {
                    		BoxFile.Info fileInfo = (BoxFile.Info) itemInfo;
                    		myList.add(fileInfo);
                    	} else if (itemInfo instanceof BoxFolder.Info ) {
                    		BoxFolder.Info folderInfo = (BoxFolder.Info) itemInfo;
                    		if( objectType.equals("DIRECTORIES") || objectType.equals("BOTH") ) {
                    			myList.add(folderInfo);
                    		}
                    		//To understand recursion you must understand recursion first :)
                    		if( includeSubDirectories && currLevel <= maxLevel) {
                    			myList.addAll(listBox(clientId, clientSecret, SSO, folderInfo.getID(), objectType, includeSubDirectories, currLevel, maxLevel));
                    		}
                    	}
                }

                return myList;

            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                System.out.println(a.getMessage() + "_" + a.getResponse());
                //resJSON = (JsonObject) parser.parse(a.getResponse());
                //return a.getResponse();
                e = a;
                Thread.sleep(2000);
            }
        }
        throw e;
    }
    
    
  //***********************************Create BOX file from String***********************************************************/
    /**
     * createBoxFileFromString:  creates / uploads / overwrites a given file
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String fileId
     * {example} 
     */
    public static String createBoxFileFromString (String clientId, String clientSecret, String SSO, String folderId, String fileName, String fileContent) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        
        boolean fileExist = false;
        String fileId = "";
        if(fileContent == null) fileContent = "";
        
        int tryAmount = 0;
        
        
        System.out.println("******************Uploading XML file*****************************");
        System.out.println("File Name: " + fileName);
        System.out.println("Parent Folder Id: " + folderId);
        
        
        while (tryAmount++ < 5) {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                //Do the copy
                InputStream fis = new ByteArrayInputStream(fileContent.getBytes("UTF-8"));
                
                if(fileExist==false) {
                    //This is a folder where we want to update the description
                    //System.out.println("Trying to upload XML as new");
                	BoxFolder folder = new BoxFolder(api, folderId);
                    
                    BoxFile.Info uploadInfo = folder.uploadFile(fis, com_ge_datacoe_boxhelper.fixBadNames(fileName));
                    //System.out.println("Uploaded a new XML");
                    return uploadInfo.getID();
                } else {
                    //System.out.println("Existing. Trying to upload XML as new version");
                    BoxFile file = new BoxFile(api, fileId);
                    file.uploadVersion(fis);
                    //System.out.println("Existing. Uploaded a new XML version");
                    return fileId;
                }

            } catch (BoxAPIException a) {
                if(a.getResponse() != null ) {
                    JsonParser parser = new JsonParser();
                    JsonObject resJSON = new JsonObject();
                	resJSON = (JsonObject) parser.parse(a.getResponse());
                	if (resJSON.get("code").getAsString().equals("item_name_in_use")) {
                		fileId = resJSON.get("context_info").getAsJsonObject()
                            	.get("conflicts").getAsJsonObject()
                            	.get("id").getAsString();
                				fileExist = true;
                	} else {
                		e = a;
                		Thread.sleep(2000);
                	}
                } else {
                	e = a;
            		Thread.sleep(2000);
                }
            }
        }
        throw e;
    }
    
    /**
     * getFileIdByNameAndHash: checks if the file exists in the folder by its SHA-1 hash.
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String fileId
     * {example} 
     */
    public static String getFileIdByNameAndHash (String clientId, String clientSecret, String SSO, String parentFolderId, String fileName, String fileLocation) throws Exception{
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");

        File localFile = new File(fileLocation);
        String sha1 =  toHex( createSha1 (localFile) );
    	//List all the files that we have in that folder.
        int tryAmount = 0;
        while (tryAmount++ < 5)
        {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
                //Define description
                
                BoxFolder folder = new BoxFolder(api, parentFolderId);
                for (BoxItem.Info itemInfo : folder) {
                	   	if (itemInfo instanceof BoxFile.Info ) {
                    		BoxFile.Info fileInfo = (BoxFile.Info) itemInfo;
                    		
                            if(sha1.equals(fileInfo.getSha1()) ) {
                            	System.out.println("File existed. SHA1 matched!! Sha1:" + sha1);
                            	return fileInfo.getID();
                            }
                	   	}
                }
                //throw new Exception ("File wasn't there or its hash is different!");
                return null;
            } catch (BoxAPIException a) {
                JsonParser parser = new JsonParser();
                JsonObject resJSON = new JsonObject();
                System.out.println(a.getMessage() + "_" + a.getResponse());
                //resJSON = (JsonObject) parser.parse(a.getResponse());
                //return a.getResponse();
                e = a;
                Thread.sleep(2000);
            }
        }
        //If name matches check if SHA1 matches as well
    	
    	throw e;
    }
    
  //***********************************Does the FileId exist in BOX?***********************************************************/
    /**
     * checkBoxFileExists: checks if the file exists in the folder by its id
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String fileId
     * {example} 
     */
    public static String checkBoxFileExists (String clientId, String clientSecret, String SSO, String fileId) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
      
        int tryAmount = 0;
        while (tryAmount++ < 5) {
            try {
                //create a connection 
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                BoxFile file = new BoxFile(api, fileId);
                BoxFile.Info info = file.getInfo("id");
       
                return "ok";
            } catch (BoxAPIException a) {
            	if(a.getResponse() != null ) {
                    JsonParser parser = new JsonParser();
                    JsonObject resJSON = new JsonObject();
                	resJSON = (JsonObject) parser.parse(a.getResponse());
                	if (resJSON.get("code").getAsString().equals("not_found")) {
	                		return "not found";                				
                	} else {
                		e = a;
                		Thread.sleep(2000);
                	}
            	}
            }
            
        }
        return "error";
    }
    
    
    //***********************************Does the FolderId exist in BOX?***********************************************************/
    /**
     * checkBoxFolderExists: checks if the folder exists by its id
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String fileId
     * {example} 
     */
    public static String checkBoxFolderExists (String clientId, String clientSecret, String SSO, String folderId) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
      
        int tryAmount = 0;
        while (tryAmount++ < 5) {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));

                BoxFolder folder = new BoxFolder(api, folderId);
                BoxFolder.Info info = folder.getInfo("id");
       
                return "ok";
            } catch (BoxAPIException a) {
            	if(a.getResponse() != null ) {
                    JsonParser parser = new JsonParser();
                    JsonObject resJSON = new JsonObject();
                	resJSON = (JsonObject) parser.parse(a.getResponse());
                	if (resJSON.get("code").getAsString().equals("not_found")) {
	                		return "not found";                				
                	} else {
                		e = a;
                		Thread.sleep(2000);
                	}
            	}
            }
            
        }
        return "error";
    }
    
    
   //***********************************Create WebLink / Bookmark***********************************************************/
    /**
     * createBoxWebLink: creates a bookmark in the folder based on an existing bookmark
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String fileId
     * {example} 
     */
    public static void createBoxWebLink(String clientId, String clientSecret, String SSO, String folderId, String bookmarkName, String bookmarkUrl) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        
        boolean bookmarkExist = false;
        String bookmarkId = "";
        int tryAmount = 0;
        while (tryAmount++ < 5)
        {
            try {
                //create a connection
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                
                
                URL url = new URL(bookmarkUrl);
                BoxFolder folder = new BoxFolder(api, folderId);
                
                if(bookmarkExist==false) {
                	//create WebLink/bookmark
                	folder.createWebLink(bookmarkName, url);
                	return;
                } else {
                	System.out.println("Bookmark already exists");
                	//BoxWebLink webLink = new BoxWebLink(api, bookmarkId);
                	//BoxWebLink.Info info = webLink.getInfo();
                	//info.setName(bookmarkName);
                	//no function found to set URL
                	//webLink.updateInfo(info);
                	return;
                }
                    
                

            } catch (BoxAPIException a) {
                if(a.getResponse() != null ) {
                    JsonParser parser = new JsonParser();
                    JsonObject resJSON = new JsonObject();
                	resJSON = (JsonObject) parser.parse(a.getResponse());
                	if (resJSON.get("code").getAsString().equals("item_name_in_use")) {
                		bookmarkExist = true;
                		bookmarkId = resJSON.get("context_info").getAsJsonObject()
                            	.get("conflicts").getAsJsonObject()
                            	.get("id").getAsString();
                		System.out.println("Bookmark already exists");
                	} else {
                		e = a;
                		Thread.sleep(2000);
                	}
                } else {
                	e = a;
            		Thread.sleep(2000);
                } 
            }
        }
        throw e;
    }
    
    
  //***********************************Compare SHA1 in BOX to local file***********************************************************/
    /**
     * CompareSHA1: verifies the SHA1 of a given file
     * {talendTypes} String
     * {Category} User Defined
     * {param} String clientId, String clientSecret, String SSO, String fileId
     * {example} 
     */
    public static boolean CompareSHA1 (String clientId, String clientSecret, String SSO, String boxParentFolderId, String fileLocation) throws Exception {
        com_ge_datacoe_boxhelper.init();
        Exception e = new Exception("Something went wrong");
        
        int tryAmount = 0;

    	//Define local file
        File localFile = new File(fileLocation);
        String localSha1 =  toHex( createSha1 (localFile) );
        String fileName = localFile.getName();

        while (tryAmount++ < 5) {
            try {
                //Search for BOX FileID by name
                BoxAPIConnection api = new BoxAPIConnection(getToken(clientId, clientSecret, SSO));
                                
                BoxFolder boxFolder = new BoxFolder(api, boxParentFolderId);
                for (BoxItem.Info itemInfo : boxFolder) {
                    if (itemInfo instanceof BoxFile.Info) {
                          if(itemInfo.getName().equalsIgnoreCase(fileName)) {
                        	
                        	String boxFileId = itemInfo.getID();
                        	
                            //Define BOX file
                            BoxFile boxfile = new BoxFile(api, boxFileId);
                            String boxSha1 = boxfile.getInfo().getSha1();

                            
                            if(localSha1.equals(boxSha1) ) {
                                	System.out.println("File existed. SHA1 matched!! Sha1:" + localSha1);
                                	return true;
                                } else {
                                	System.out.println("File existed but SHA1 didn't match!! Local Sha1: " + localSha1 + " Remote Sha1: " + boxSha1);
                                	return false;
                                }
                          	}
                    	} 
                	}

                } catch (BoxAPIException a) {
                if(a.getResponse() != null ) {
                	System.out.println(a.getResponse());
                    //JsonParser parser = new JsonParser();
                    //JsonObject resJSON = new JsonObject();
                	//resJSON = (JsonObject) parser.parse(a.getResponse());

                	return false;  
                	}
                }
                
            } System.out.println("File did not exist in BOX");
              return false;
        }

    
    
    //***********************************Create SHA1 for a file***********************************************************/
     
    public static byte[] createSha1(File file) throws Exception  {
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        InputStream fis = new FileInputStream(file);
        int n = 0;
        byte[] buffer = new byte[8192];
        while (n != -1) {
            n = fis.read(buffer);
            if (n > 0) {
                digest.update(buffer, 0, n);
            }
        }
        return digest.digest();
    }
    
    //*** to format hex */
    private static String toHex(byte[] array)
    {
        BigInteger bi = new BigInteger(1, array);
        String hex = bi.toString(16);
        int paddingLength = (array.length * 2) - hex.length();
        if(paddingLength > 0)
            return String.format("%0" + paddingLength + "d", 0) + hex;
        else
            return hex;
    }
    
    
}