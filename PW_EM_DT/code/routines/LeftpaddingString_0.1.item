package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class LeftpaddingString {

    /**
     * formats the number
     * 
     * {Category} LeftpaddingString
     * 
     * {talendTypes} String
     * 
     * {param} Integer(1234) number: number to format
     * {param} Integer(6) lengthWithLeadingZeros: length with leading zeros
     * 
     * {example} LeftpaddingString(1234, 6) result: 001,234
     */
	public static String LeftpaddingString(String input, int lengthWithLeadingZeros) {
		 if (input != null) {
		 String s = String.valueOf(input);
		 String rawString = s.replace(".", "").replace(",", "");
		 System.out.println(rawString);
		 if (lengthWithLeadingZeros > rawString.length()) {
		  StringBuilder sb = new StringBuilder();
		  for (int i = rawString.length(); i < lengthWithLeadingZeros; i++) {
		  sb.append('0');
		  }
		  sb.append(s);
		  return sb.toString();
		 } else {
		  return s;
		 }
		 } else {
		 return "";
		 }

		}}