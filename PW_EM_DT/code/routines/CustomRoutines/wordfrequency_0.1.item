package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class wordfrequency {
	
	public static List<Entry<String, Integer>> sortByValue(Map<String, Integer> wordMap){
        
        Set<Entry<String, Integer>> set = wordMap.entrySet();
        List<Entry<String, Integer>> list = new ArrayList<Entry<String, Integer>>(set);
        Collections.sort( list, new Comparator<Map.Entry<String, Integer>>()
        {
            public int compare( Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2 )
            {
                return (o2.getValue()).compareTo( o1.getValue() );
            }
        } );
        return list;
    }

		public static String generateFrequencyMapping(String input){
			
			List<String> inputArr = Arrays.asList(input.split("~"));
			 
			Map<String,Integer> fMap = new HashMap<String, Integer>();
			
			for(String s:inputArr){
				
				//System.out.println(s);
				if(("REFURB").equalsIgnoreCase(inputArr.get(0))){
					return "Refurb";
				}
				Integer cnt = fMap.get(s);
				cnt = ((cnt == null) ? 1:++cnt);
				fMap.put(s,cnt);
				
			}
			
			
			List<Entry<String, Integer>> list = sortByValue(fMap);
	        for(Map.Entry<String, Integer> entry:list){
	            //System.out.println(entry.getKey()+" ==== "+entry.getValue());
	            if(entry.getValue() >=2 && ("CSA".equals(entry.getKey()) || "MMP".equals(entry.getKey()))){
	            		
	            	return entry.getKey();
	            }
	            else if(entry.getValue() ==1 && ("CSA".equals(entry.getKey()) || "MMP".equals(entry.getKey()))){
	            	if(fMap.get("MMP")!= null){
	            		return "MMP";
	            	}
	            	else if(fMap.get("CSA")!=null){
	            		return "CSA";
	            	}
	            }
	            else if("N/A".equals(entry.getKey()) || "null".equals(entry.getKey())){
	            	if(fMap.get("MMP")!= null){
	            		return "MMP";
	            	}
	            	else if(fMap.get("CSA")!=null){
	            		return "CSA";
	            	}
	            	
	            		return "N/A";
	            }
	        }
			//System.out.println("coming");
			return null;
		}
		
		/*public static void main(String[] args) {
			String input = "Refurb"+"~"+null+"~"+null;
			System.out.println(generateFrequencyMapping(input));
		}*/
	
}