package routines;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.Writer;
import java.sql.Date;


import routines.system.DBMSConstants;
import routines.system.Dynamic;
import routines.system.DynamicMetadata;
import routines.system.FormatterUtils;

public class GEDynamicRoutine {
	
	private static final java.util.Map<String, Integer> seq_Hash = new java.util.HashMap<String, Integer>();
	private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(GEDynamicRoutine.class);
	
	public static Integer sequence(String seqName, int startValue, int step) {
        if (seq_Hash.containsKey(seqName)) {
            seq_Hash.put(seqName, seq_Hash.get(seqName) + step);
            return seq_Hash.get(seqName);
        } else {
            seq_Hash.put(seqName, startValue);
            return startValue;
        }
    }
	
	/**
     * returnDataAsString: return the Dynamic Data as a String with the expected Delimiter
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("world") input: The string need to be printed.
     * {example} helloExemple("world") # hello world !.
     */

	public static String HAWQ_ADDITIONAL_COLUMNS_DATA(String additionalCols, String delimiter){
	//String delimiter = delimit;
	//String additionalCols = ADDITIONAL_COLS;
	//public static String HAWQ_ADDITIONAL_COLUMNS_DATA(String ADDITIONAL_COLS, String delimiter) {
	String forReturn = "";
	

	
	if(additionalCols == null || additionalCols.length() <= 5 ) {
	      forReturn = "";
	} else if(additionalCols.contains("/*+")) {
	  for(String str : additionalCols.split("/[*][+]") ) {
	      if( !str.startsWith("key:") && str.contains("*/") ) {
	            String temp = str.split("[*]/")[0];
	            if(temp.startsWith("'") ) {
	                  if(temp.endsWith("'")) {
	                        forReturn += delimiter + temp.substring(1,temp.length()-1);
	                  } else throw new RuntimeException(" additional column string not valid");
	            } else if ("sysdate".equals(temp)) {
	                  forReturn += delimiter + TalendDate.getDate("yyyy-MM-dd");
	            } else if ("sysdatetime".equals(temp)) {
	                 forReturn += delimiter + TalendDate.getDate("yyyy-MM-dd HH:mm:ss");
	           } else if ("systime".equals(temp)) {
	                 forReturn += delimiter + TalendDate.getDate("HH:mm:ss"); 
	            } else if ("null".equals(temp)) { 
	                  forReturn += delimiter + "\\N";
	           } else {
	                 forReturn += delimiter + "\\N";
	            }
	      } /* contains * / */
	  }
//	  forReturn = forReturn.substring(0, forReturn.length() - delimiter.length()); // remove the last delimiter
	} else {
	//for backward compatibility
	      forReturn = delimiter + "False" + delimiter + "" + delimiter + "" + delimiter  + TalendDate.getDate("yyyy-MM-dd HH:mm:ss");
	      
	}
	

	
	return forReturn;
	}
	

	public static String SQLLoader_ADDITIONAL_COLUMNS_DATA(String additionalCols, String delimiter){
		//String delimiter = delimit;
		//String additionalCols = ADDITIONAL_COLS;
		//public static String HAWQ_ADDITIONAL_COLUMNS_DATA(String ADDITIONAL_COLS, String delimiter) {
		String forReturn = "";
		
		if(additionalCols == null || additionalCols.length() <= 5 ) {
		      forReturn = "";
		} else if(additionalCols.contains("/*+")) {
		  for(String str : additionalCols.split("/[*][+]") ) {
		      if( !str.startsWith("key:") && str.contains("*/") ) {
		            String temp = str.split("[*]/")[0];
		            if(temp.startsWith("'") ) {
		                  if(temp.endsWith("'")) {
		                        forReturn += temp.substring(1,temp.length()-1) + delimiter ;
		                  } else throw new RuntimeException(" additional column string not valid");
		            } else if ("sysdate".equals(temp)) {
		                  forReturn += TalendDate.getDate("yyyy-MM-dd") + delimiter ;
		            } else if ("sysdatetime".equals(temp)) {
		                 forReturn += TalendDate.getDate("yyyy-MM-dd HH:mm:ss") + delimiter ;
		           } else if ("systime".equals(temp)) {
		                 forReturn += TalendDate.getDate("HH:mm:ss") + delimiter ; 
		            } else if ("null".equals(temp)) { 
		                  forReturn += "\\N" + delimiter ;
		           } else {
		                 forReturn += "\\N" + delimiter ;
		            }
		      } 
		  }
		}
		return forReturn;
		}
		

	
	
    /**
     * returnDataAsString: return the Dynamic Data as a String with the expected Delimiter
     * {talendTypes} String
     * {Category} User Defined
     * {param} string("world") input: The string need to be printed.
     * {example} helloExemple("world") # hello world !.
     */
	
	public static String returnDataAsStringEnclosed(Dynamic column, String delimiter, String encloser) throws IOException {
	       
	    
	      
        StringBuilder sb = new StringBuilder();
        if (column != null) {
          for (int i = 0; i < column.getColumnCount(); i++) {
            if(column.getColumnValue(i)==null) {
              sb.append("\\N");
            } else {
              if(column.getColumnMetadata(i).getType().equals("id_byte[]") || column.getColumnMetadata(i).getDbType().equals("BLOB") || "LONG RAW".equals(column.getColumnMetadata(i).getDbType()) ){
                byte[] bytearray = (byte[])column.getColumnValue(i);
                for(int bi = 0; bi < bytearray.length; bi++){
                  sb.append("\\\\");
              String octalValue = Integer.toOctalString(bytearray[bi]);
             if(octalValue.length() > 3) {
                sb.append(Integer.parseInt(octalValue.substring(8,11))-400);
              } else {
                if(octalValue.length() ==  2) sb.append("0");
                if(octalValue.length() ==  1) sb.append("00");
                sb.append(octalValue);
              }
                }
              } /*else if(column.getColumnMetadata(i).getType().equals("id_byte")){
              sb.append("\\\\");
              sb.append(Integer.toOctalString(Byte.parseByte(column.getColumnValue(i).toString())).substring(0,1) );
              sb.append(Integer.toOctalString(Byte.parseByte(column.getColumnValue(i).toString())).substring(9,11) );
              } */
               else  {
                  sb.append(encloser + String.valueOf(column.getColumnValue(i)).replace("\\","\\\\").replace(delimiter,"\\" + delimiter) + encloser);
               }
            }
            if(i!=column.getColumnCount()-1){
              sb.append(delimiter);
            }
          }
          
          
          
          return sb.toString().replaceAll("\\\n", "\\\\012").replaceAll("\\u0000","").replaceAll("\\x00", "").replaceAll("\\\r","\\\\015"); 
          }
        else 
         return null;


    }
	
    public static String returnDataAsString(Dynamic column, String delimiter) throws IOException {
    	 
        StringBuilder sb = new StringBuilder();
        if (column != null) {
          for (int i = 0; i < column.getColumnCount(); i++) {
            if(column.getColumnValue(i)==null) {
              sb.append("\\N");
            } else {
              if(column.getColumnMetadata(i).getType().equals("id_byte[]") || column.getColumnMetadata(i).getDbType().equals("BLOB") || "LONG RAW".equals(column.getColumnMetadata(i).getDbType()) ){
            	  byte[] bytearray = (byte[])column.getColumnValue(i);
            	  for(int bi = 0; bi < bytearray.length; bi++){
            		  sb.append("\\\\");
	  					String octalValue = Integer.toOctalString(bytearray[bi]);
	  					if(octalValue.length() > 3) {
	  						sb.append(Integer.parseInt(octalValue.substring(8,11))-400);
	  					} else {
	  						if(octalValue.length() ==  2) sb.append("0");
	  						if(octalValue.length() ==  1) sb.append("00");
	  						sb.append(octalValue);
	  					}
            	  }
              } /*else if(column.getColumnMetadata(i).getType().equals("id_byte")){
          		sb.append("\\\\");
          		sb.append(Integer.toOctalString(Byte.parseByte(column.getColumnValue(i).toString())).substring(0,1) );
          		sb.append(Integer.toOctalString(Byte.parseByte(column.getColumnValue(i).toString())).substring(9,11) );
              } */
               else 
            	sb.append(String.valueOf(column.getColumnValue(i)).replace("\\","\\\\").replace(delimiter,"\\" + delimiter));
            }
            if(i!=column.getColumnCount()-1){
              sb.append(delimiter);
            }
          }
          
          
          
          return sb.toString().replaceAll("\\\n", "\\\\012").replaceAll("\\u0000","").replaceAll("\\x00", "").replaceAll("\\\r","\\\\015"); 
          }
        else 
         return null;


    }
    
    public static String returnDataAsStringSQLLoader(Dynamic column, String delimiter, String outFileName) throws IOException {

    	String tmp = "";
        StringBuilder sb = new StringBuilder();
        if (column != null) {
          for (int i = 0; i < column.getColumnCount(); i++) {
        	//null
            if(column.getColumnValue(i)==null) {
        		sb.append("\\N");            	
/*            	if(column.getColumnMetadata(i).getType().equals("id_byte[]")
                    	|| column.getColumnMetadata(i).getDbType().toUpperCase().contains("BLOB")
                    	|| column.getColumnMetadata(i).getDbType().toUpperCase().contains("CLOB")
                    	|| GEroutines.mapToTargetTypes(column.getColumnMetadata(i).getDbType(), "ORACLE").toUpperCase().contains("BLOB")
                    	|| GEroutines.mapToTargetTypes(column.getColumnMetadata(i).getDbType(), "ORACLE").toUpperCase().contains("CLOB")){
            		// Do nothing?
            		sb.append("\"\""); //Time spent figuring this: 10 hours....
            	} else {
            		sb.append("\\N");
            	}*/
            } else {
           //BLOB
              if( column.getColumnMetadata(i).getDbType().toUpperCase().contains("CLOB")
                	|| GEroutines.mapToTargetTypes(column.getColumnMetadata(i).getDbType(), "ORACLE").toUpperCase().contains("CLOB") ){
               	  String outBlobFile = outFileName + "/" + column.getColumnMetadata(i).getName()+"_" + sequence(outFileName, 1, 1)+ ".clob";
               	  FileOutputStream fos = new FileOutputStream(outBlobFile);
               	  fos.write( ((String)column.getColumnValue(i)).getBytes() );
               	  fos.close();
               	  sb.append(outBlobFile);
              } else if(column.getColumnMetadata(i).getType().equals("id_byte[]")
            	|| column.getColumnMetadata(i).getDbType().toUpperCase().contains("BLOB")
            	|| GEroutines.mapToTargetTypes(column.getColumnMetadata(i).getDbType(), "ORACLE").toUpperCase().contains("BLOB") ){
            	  String outBlobFile = outFileName + "/" + column.getColumnMetadata(i).getName()+"_" + sequence(outFileName, 1, 1)+ ".blob";
            	  FileOutputStream fos = new FileOutputStream(outBlobFile);
            	  fos.write((byte[])column.getColumnValue(i));
            	  fos.close();
            	  sb.append(outBlobFile);
              } else {
            	  log.debug("GEDynamicRoutine - returnDataAsString Column: " + column.getColumnMetadata(i).getName()+ "Db Type: " + column.getColumnMetadata(i).getDbType() + " Dynamic Type:" + column.getColumnMetadata(i).getType() );
            	  //string / date / CLOB / etc
            	  	if(String.valueOf(column.getColumnValue(i)).contains(delimiter) ||
              			String.valueOf(column.getColumnValue(i)).contains("\n") ||
              			String.valueOf(column.getColumnValue(i)).contains("\r") ||
              			String.valueOf(column.getColumnValue(i)).contains("\"") ||
              			(String.valueOf(column.getColumnValue(i)).length() >= 4000) ) {
            		  //enclose the strings that contains special characters
              		sb.append("\"");
              		sb.append(String.valueOf(column.getColumnValue(i)).replace("\"", "\"\"") );
              		sb.append("\"");
              	  } else if ( String.valueOf(column.getColumnValue(i)).trim().isEmpty() ) {
             	  	 //Oracle doesn't deserve to be nice with its SQL Loader, lets enclose everything
                	sb.append("\"");
                  	sb.append(String.valueOf(column.getColumnValue(i)));
                  	sb.append("\"");
              	  } else  {
              		sb.append(String.valueOf(column.getColumnValue(i)));
              	  }
              }  //string / date / blob
            } // else of is null
            sb.append(delimiter);
          }
          return sb.toString(); 
          }
        else 
         return null;


    }
    
    public static String returnColumnNames(Dynamic column, String delimiter) throws IOException {

        StringBuilder sb = new StringBuilder();
        if (column != null) {     
        	for (int i = 0; i < column.getColumnCount(); i++) {
			DynamicMetadata metadata = column.getColumnMetadata(i);
        	
        	  sb.append(String.valueOf(metadata.getName()));
        	  sb.append(" ");
        	  sb.append(String.valueOf(metadata.getType()));
        	
        	if (i != (column.getColumnCount() - 1)) 
        	  sb.append(delimiter);
        	}
          return sb.toString().replace("\\","\\\\").replaceAll("\\\n", "").replaceAll("null","")
          	.replaceAll("\\u0000","").replaceAll("\\x00", "").replaceAll("\\\r","");
        }
        else 
         return null;
    }
    }




